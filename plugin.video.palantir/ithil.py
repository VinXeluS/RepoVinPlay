import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import sys
import re
import os
import xbmcgui
import xbmc
import HTMLParser
import xbmcplugin
import urllib
import urllib2
import sqlite3
import base64
import zlib
from urllib2 import HTTPError
from urllib2 import URLError
import traceback
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
if 5 - 5: i1iI1 + o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - IiII1IiI
def oooo00OoOoOo0 ( text ) :
 o0oo0OO = '7Se10gAIe-T0_a'
 if 25 - 25: oO0O * Oo00O0oOooO0O - oOOoO - O0O
 o0oo0OO = base64 . urlsafe_b64decode ( 'N1NlMTBnQUllLVQwX2E=' )
 try :
  Ooo0o = base64 . urlsafe_b64decode ( str ( text ) )
  OOO0O00O0 = [ ]
  for i1ii1i in xrange ( len ( Ooo0o ) ) :
   iIII1 = o0oo0OO [ i1ii1i % len ( o0oo0OO ) ]
   OO000000Ooo = chr ( ord ( Ooo0o [ i1ii1i ] ) - ord ( iIII1 ) % 256 )
   OOO0O00O0 . append ( OO000000Ooo )
  oOOoO00oO0o = '' . join ( OOO0O00O0 )
  return oOOoO00oO0o
 except TypeError , iiI1IIiI :
  return text
  if 77 - 77: ii1i1ii1I * Ii1111I11i1I - oOOoO
  if 64 - 64: oO0O . OOoOoO0o0o0OO . OOO - ii1I1ii1IiIi1 . oooOoO * Ii
  if 63 - 63: OOoOoO0o0o0OO . iiIIi1i1Iii / IIoooO0ooO0oo . Ii / IIoooO0ooO0oo % ii1I1ii1IiIi1
  if 3 - 3: Oo00O0oOooO0O % ii1i1ii1I * Ii1111I11i1I / OOO * Ii1111I11i1I
  if 51 - 51: iiIIi1i1Iii . Ii1111I11i1I % OOoOoO0o0o0OO
  if 31 - 31: i1iI1 / i1iI1 % II * Ii1111I11i1I - II
def OOo0000oO ( ) :
 return 'eJzLKCkpsNLXL8-sSixKSU4syU_M0UstrgRi_YDEnMS8kswiAO2-DU0='
 if 48 - 48: iiIIi1i1Iii % OOO
 if 52 - 52: II
def I111I11I11111 ( bas ) :
 IIIii1Ii = sqlite3 . connect ( bas )
 OO0o = IIIii1Ii . cursor ( )
 I11iIiIIi = ''
 if 28 - 28: IIII
 try :
  if 56 - 56: iiIIi1i1Iii + IIII . Ii1111I11i1I - ii1i1ii1I + oO0O / IiII1IiI
  OO0o . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IGxvYyBmcm9tIHZlcnNpb24=' ) )
  oO = OO0o . fetchone ( )
  I11iIiIIi = oO [ 0 ]
  IIIii1Ii . close ( )
 except :
  try :
   IIIii1Ii . close ( )
  except :
   pass
   if 40 - 40: ii1I1ii1IiIi1 * oO0O / I1
  try :
   os . remove ( bas )
  except :
   pass
 return str ( I11iIiIIi . strip ( ) )
 if 28 - 28: Oo00O0oOooO0O - o00oO0oo0O0O0 / ii1i1ii1I + Ii1111I11i1I / Ii
 if 41 - 41: i1iI1 - OOO % O0O - IIoooO0ooO0oo + O0O
def I1iiI1I ( url , post = None ) :
 iIi1III11 = { 'User-Agent' : 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14' }
 oooO0oo0 = urllib2 . urlopen
 oO00o = urllib2 . Request
 oo0O0 = oO00o ( url , post , iIi1III11 )
 Ii11 = oooO0oo0 ( oo0O0 )
 I11Iii11i1Ii1 = Ii11 . read ( )
 return I11Iii11i1Ii1
 if 36 - 36: iiIIi1i1Iii / oooOoO + o00oO0oo0O0O0
def ii ( bd , id , val , type ) :
 try :
  I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( bd ) ) )
  if 56 - 56: i1iI1
  i1I1IIIII = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL3F1YWxpdHkucGhwP3R5cGU9JXNpZD0lcyZ2YWw9JXM=' ) ) % (
 I11iIiIIi , type , id , str ( val ) )
  I1iiI1I ( i1I1IIIII )
  Ooo0o0ooO = id . split ( '-' )
  if 23 - 23: OOoOoO0o0o0OO * Oo00O0oOooO0O
  IIIii1Ii = sqlite3 . connect ( bd )
  OO0o = IIIii1Ii . cursor ( )
  if type == 'series' :
   if Ooo0o0ooO [ 2 ] :
    if 33 - 33: ii1i1ii1I * oOO % OOO
    OO0o . execute ( base64 . urlsafe_b64decode (
 'VVBEQVRFIGNhcGl0dWxvcyBTRVQgcXVhbGl0eT0_IFdIRVJFIHNlcmllX2lkID0gPyBBTkQgdGVtcF9pZCA9ID8gQU5EIGNhcGl0dWxvX2lkID0gPw==' ) ,
 ( str ( val ) , int ( Ooo0o0ooO [ 0 ] ) , int ( Ooo0o0ooO [ 1 ] ) , Ooo0o0ooO [ 2 ] , ) )
   elif Ooo0o0ooO [ 1 ] :
    if 25 - 25: o00oO0oo0O0O0 % Ii1111I11i1I . O0O + IIII * o00oO0oo0O0O0 / oOO
    OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllc190ZW1wIFNFVCBxdWFsaXR5PT8gV0hFUkUgc2VyaWVfaWQgPSA_IEFORCB0ZW1wX2lkID0gPw==' ) ,
 ( str ( val ) , int ( Ooo0o0ooO [ 0 ] ) , int ( Ooo0o0ooO [ 1 ] ) , ) )
   elif Ooo0o0ooO [ 0 ] :
    if 45 - 45: oO0O . IIII . oO0O
    OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllcyBTRVQgcXVhbGl0eT0_IFdIRVJFIHNlcmllX2lkID0gPw==' ) ,
 ( str ( val ) , int ( Ooo0o0ooO [ 0 ] ) , ) )
  else :
   if 74 - 74: OOO * IIoooO0ooO0oo
   OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHBlbGlzIFNFVCBxdWFsaXR5PT8gV0hFUkUgcGVsaV9pZCA9ID8=' ) ,
 ( str ( val ) , int ( Ooo0o0ooO [ 0 ] ) , ) )
  IIIii1Ii . commit ( )
  IIIii1Ii . close ( )
 except Exception as iiI1IIiI :
  pass
  if 20 - 20: iiIIi1i1Iii
  if 68 - 68: Ii - II / Ii1111I11i1I % IIII . Ii1111I11i1I . OOO
def iiiI ( link , bd , id , temp_id = 0 ) :
 I1Iii1 = [ ]
 try :
  iIiI1iiII1Ii = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
  i1I1IIIII = oooo00OoOoOo0 ( str ( link ) )
  iIiI1iiII1Ii [ 'referer' ] = '/' . join ( i1I1IIIII . split ( '/' ) [ : 4 ] )
  iIiI1iiII1Ii [ 'connection' ] = 'keep-alive'
  oo0O0 = urllib2 . Request ( i1I1IIIII , None , iIiI1iiII1Ii )
  Ii11 = urllib2 . urlopen ( oo0O0 )
  I11Iii11i1Ii1 = Ii11 . read ( )
  Ii11 . close ( )
  ooOoO0O0 = '/' . join ( i1I1IIIII . split ( '/' ) [ 0 : 5 ] )
  i1iIii = re . findall ( 'class="list_row".*data-file-id="(.*?)"' , I11Iii11i1Ii1 )
  if 79 - 79: iiIIi1i1Iii - o00oO0oo0O0O0 % OOO
  IiiIi1i1i = re . findall ( 'class="name">\s*<a.*data-action-before="preview".*>(.*?)</a>' , I11Iii11i1Ii1 )
  oO0OOo00Oo0O = HTMLParser . HTMLParser ( )
  if 52 - 52: ii1I1ii1IiIi1 % oOOoO . o00oO0oo0O0O0 / oooOoO
  if len ( i1iIii ) > 0 :
   try :
    IIIii1Ii = sqlite3 . connect ( bd )
    OO0o = IIIii1Ii . cursor ( )
    if temp_id > 0 :
     if 48 - 48: IIII * Oo00O0oOooO0O + O0O
     OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG5fZXBpIGZyb20gc2VyaWVzX3RlbXAgV0hFUkUgc2VyaWVfaWQgPSA_IEFORCB0ZW1wX2lkID0gPw==' ) , ( id , temp_id , ) )
    else :
     if 88 - 88: ii1I1ii1IiIi1 + OOoOoO0o0o0OO / Oo00O0oOooO0O - ii1i1ii1I + Ii
     OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG5fZXBpIGZyb20gc2VyaWVzIFdIRVJFIHNlcmllX2lkID0gPw==' ) , ( id , ) )
    oO = OO0o . fetchone ( )
    IIIii1Ii . close ( )
    if oO [ 0 ] < len ( i1iIii ) :
     I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( bd ) ) )
     if temp_id > 0 :
      if 10 - 10: IIII . IIII + oOOoO - Ii - I1
      i1I1IIIII = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL2VwaS5waHA_aWQ9JXMmdGVtcD0lcyZ2YWw9JXM=' ) ) % (
 I11iIiIIi , id , temp_id , str ( len ( i1iIii ) ) )
     else :
      if 74 - 74: o00oO0oo0O0O0 - oOOoO / Ii1111I11i1I
      i1I1IIIII = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL2VwaS5waHA_aWQ9JXMmdmFsPSVz' ) ) % (
 I11iIiIIi , id , str ( len ( i1iIii ) ) )
     I1iiI1I ( i1I1IIIII )
     if 50 - 50: OOoOoO0o0o0OO / oO0O / O0O . Ii % IiII1IiI
     IIIii1Ii = sqlite3 . connect ( bd )
     OO0o = IIIii1Ii . cursor ( )
     if temp_id > 0 :
      if 36 - 36: oooOoO % O0O
      OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllc190ZW1wIFNFVCBuX2VwaT0_IFdIRVJFIHNlcmllX2lkID0gPyBBTkQgdGVtcF9pZCA9ID8=' ) , ( len ( i1iIii ) , id , temp_id , ) )
     else :
      if 38 - 38: OOO * Ii
      OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllcyBTRVQgbl9lcGk9PyBXSEVSRSBzZXJpZV9pZCA9ID8=' ) , ( len ( i1iIii ) , id , ) )
     IIIii1Ii . commit ( )
     IIIii1Ii . close ( )
   except Exception as iiI1IIiI :
    pass
  for I1i1I1iI11I in xrange ( 0 , len ( i1iIii ) ) :
   I1Iii1 . append ( ( oO0OOo00Oo0O . unescape ( IiiIi1i1i [ I1i1I1iI11I ] . decode ( 'utf-8' ) ) , iiIIiiII1 ( '%s/p,%s,list,1,3.avi' % ( ooOoO0O0 , i1iIii [ I1i1I1iI11I ] ) ) ) )
 except ( HTTPError , URLError ) as iiI1IIiI :
  oO0oOOOOOo0 = xbmcgui . ListItem ( 'Enlace borrado' , iconImage = 'DefaultVideo.png' )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , False , oO0oOOOOOo0 )
  iI = xbmcgui . Dialog ( )
  iI . notification ( 'Palantir' , 'Enlace borrado' , xbmcgui . NOTIFICATION_WARNING , 5000 )
 return I1Iii1
 if 33 - 33: oOO / IIII % i1iI1 + Ii1111I11i1I - oO0O % Oo00O0oOooO0O
def ii11i ( url ) :
 url = oooo00OoOoOo0 ( url )
 if 75 - 75: oOO + Oo00O0oOooO0O - ii1i1ii1I
 if base64 . urlsafe_b64decode ( 'ZGlza29rb3NtaWtv' ) in url :
  return base64 . urlsafe_b64decode ( 'ZGs=' )
  if 16 - 16: oOOoO % Ii1111I11i1I * IiII1IiI * i1iI1
 elif base64 . urlsafe_b64decode ( 'Y29waWFwb3A=' ) in url :
  return base64 . urlsafe_b64decode ( 'Y3A=' )
  if 10 - 10: iiIIi1i1Iii . O0O % Oo00O0oOooO0O - Oo00O0oOooO0O - Ii1111I11i1I
 elif base64 . urlsafe_b64decode ( 'c3RyZWFtY2xvdWQ=' ) in url :
  return base64 . urlsafe_b64decode ( 'c2M=' )
  if 44 - 44: OOO + IiII1IiI - II . ii1I1ii1IiIi1 / II
 elif base64 . urlsafe_b64decode ( 'cGFydGFnb3Jh' ) in url :
  return base64 . urlsafe_b64decode ( 'cHQ=' )
  if 23 - 23: o00oO0oo0O0O0 - ii1I1ii1IiIi1 . Oo00O0oOooO0O + oooOoO
 elif base64 . urlsafe_b64decode ( 'a2JhZ2k=' ) in url :
  return base64 . urlsafe_b64decode ( 'a2I=' )
  if 24 - 24: O0O + Oo00O0oOooO0O
 elif base64 . urlsafe_b64decode ( 'cnR2ZQ==' ) in url :
  return base64 . urlsafe_b64decode ( 'cmU=' )
  if 17 - 17: Oo00O0oOooO0O . IIoooO0ooO0oo
 elif base64 . urlsafe_b64decode ( 'eW91dHViZQ==' ) in url :
  return base64 . urlsafe_b64decode ( 'eXQ=' )
  if 47 - 47: OOO - I1 . OOoOoO0o0o0OO * I1 . IiII1IiI / oooOoO
 else :
  return base64 . urlsafe_b64decode ( 'dWs=' )
  if 30 - 30: I1 * o00oO0oo0O0O0 - Ii1111I11i1I + oO0O + Oo00O0oOooO0O * Ii
  if 65 - 65: ii1i1ii1I % OOoOoO0o0o0OO . Oo00O0oOooO0O
def iIoOOOO00 ( server , link ) :
 IiIiI = link . split ( '/' )
 Ii1II11IiI = '/' . join ( IiIiI [ 3 : 4 ] )
 o0o = '/' . join ( IiIiI [ 4 : 5 ] )
 link = IiIiI [ 5 ] . split ( ',' ) [ 1 ]
 oo0ooooO0O0 = link
 O000O0OoOo = '%s/-%s/p,%s,list,1,3.avi' % ( Ii1II11IiI , o0o , link )
 i1I1IIIII = '%s/%s/' % ( server , Ii1II11IiI )
 iIiI1iiII1Ii = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 OoOO0OO0o0O = '%s/%s' % ( server , O000O0OoOo )
 iIiI1iiII1Ii [ 'referer' ] = i1I1IIIII
 iIiI1iiII1Ii [ 'connection' ] = 'keep-alive'
 oo0O0 = urllib2 . Request ( OoOO0OO0o0O , None , iIiI1iiII1Ii )
 Ii11 = urllib2 . urlopen ( oo0O0 )
 I11Iii11i1Ii1 = Ii11 . read ( )
 Ii11 . close ( )
 IIiiII111i = re . findall ( 'DownloadFile.*f=%s".*RequestVerificationToken.*?value="([^"]+)' % link , I11Iii11i1Ii1 )
 iiI1I1Ii11i1I = 0
 try :
  IIiiII111i = IIiiII111i [ 0 ]
 except :
  iiI1I1Ii11i1I = 1
  if 21 - 21: II + Ii1111I11i1I * Oo00O0oOooO0O / II * ii1i1ii1I
 if iiI1I1Ii11i1I == 0 :
  iII1 = '%s/action/DownloadFile?location=fi&amp;f=%s' % ( server , oo0ooooO0O0 )
  Ooo0Oo = 'fileId=%s&__RequestVerificationToken=%s' % ( oo0ooooO0O0 , IIiiII111i )
  iIiI1iiII1Ii [ 'referer' ] = OoOO0OO0o0O
  iIiI1iiII1Ii [ 'connection' ] = 'keep-alive'
  oo0O0 = urllib2 . Request ( iII1 , Ooo0Oo , iIiI1iiII1Ii )
  Ii11 = urllib2 . urlopen ( oo0O0 )
  I11Iii11i1Ii1 = Ii11 . read ( )
  Ii11 . close ( )
  link = re . findall ( 'DownloadUrl":"([^"]+)' , I11Iii11i1Ii1 )
  Oo00o0O0oOo0 = link [ 0 ]
 else :
  Oo00o0O0oOo0 = ''
 return Oo00o0O0oOo0 . strip ( )
 if 100 - 100: II * OOoOoO0o0o0OO + OOO * ii1I1ii1IiIi1 * OOO
 if 84 - 84: Oo00O0oOooO0O + oOO . Ii1111I11i1I % ii1i1ii1I % IiII1IiI * iiIIi1i1Iii
 if 26 - 26: iiIIi1i1Iii . oOOoO
def iiIIiiII1 ( string ) :
 o0oo0OO = '7Se10gAIe-T0_a'
 OOO0O00O0 = [ ]
 for i1ii1i in xrange ( len ( string ) ) :
  iIII1 = o0oo0OO [ i1ii1i % len ( o0oo0OO ) ]
  OO000000Ooo = chr ( ord ( string [ i1ii1i ] ) + ord ( iIII1 ) % 256 )
  OOO0O00O0 . append ( OO000000Ooo )
 oOOoO00oO0o = '' . join ( OOO0O00O0 )
 return base64 . urlsafe_b64encode ( oOOoO00oO0o )
 if 47 - 47: oOOoO - o00oO0oo0O0O0 - II
 if 21 - 21: Oo00O0oOooO0O + o00oO0oo0O0O0 - i1iI1 - IiII1IiI
def i1 ( server , link ) :
 IiIiI = link . split ( '/' )
 Ii1II11IiI = '/' . join ( IiIiI [ 3 : 4 ] )
 o0o = '/' . join ( IiIiI [ 4 : 5 ] )
 link = IiIiI [ 5 ] . split ( ',' ) [ 1 ]
 IiI1I1II = 'http://%s/%s/z-%s/z,%s,list,1,2.bin' % ( server , Ii1II11IiI , o0o , link )
 Ooo0Oo = None
 iIi1III11 = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 iIi1III11 [ 'Connection' ] = 'keep-alive'
 oooO0oo0 = urllib2 . urlopen
 oO00o = urllib2 . Request
 oo0O0 = oO00o ( IiI1I1II , Ooo0Oo , iIi1III11 )
 Ii11 = oooO0oo0 ( oo0O0 )
 Oo00OooO = Ii11 . info ( ) [ 'Set-Cookie' ]
 I11Iii11i1Ii1 = Ii11 . read ( )
 i1iIii = re . search ( 'action="(\\/action\\/DownloadFile\\?location=fi&amp;f=.*?)".*?__RequestVerificationToken.*?value="(.*?)"' , I11Iii11i1Ii1 )
 iioO = 'http://%s%s' % ( server , i1iIii . group ( 1 ) . replace ( '&amp;' , '&' ) )
 IIiiII111i = i1iIii . group ( 2 )
 iIi1III11 = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 iIi1III11 [ 'Referer' ] = IiI1I1II
 iIi1III11 [ 'Cookie' ] = Oo00OooO
 iIi1III11 [ 'Connection' ] = 'keep-alive'
 Ooo0Oo = 'fileId=%s&__RequestVerificationToken=%s' % ( link , IIiiII111i )
 oooO0oo0 = urllib2 . urlopen
 oO00o = urllib2 . Request
 oo0O0 = oO00o ( iioO , Ooo0Oo , iIi1III11 )
 Ii11 = oooO0oo0 ( oo0O0 )
 I11Iii11i1Ii1 = Ii11 . read ( )
 import time
 iii = str ( int ( time . time ( ) ) ) + '404'
 OoOO0OO0o0O = 'http://%s/action/OAuth/Facebook?TimeStamp=%s' % ( server , iii )
 iIi1III11 = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 iIi1III11 [ 'Referer' ] = IiI1I1II
 iIi1III11 [ 'Cookie' ] = Oo00OooO
 iIi1III11 [ 'Connection' ] = 'keep-alive'
 Ooo0Oo = None
 oooO0oo0 = urllib2 . urlopen
 oO00o = urllib2 . Request
 oo0O0 = oO00o ( OoOO0OO0o0O , Ooo0Oo , iIi1III11 )
 Ii11 = oooO0oo0 ( oo0O0 )
 iIIiiIIIIi = Ii11 . info ( ) [ 'Set-Cookie' ]
 I11Iii11i1Ii1 = Ii11 . read ( )
 OOoOo0OO = Oo00OooO . split ( ';' )
 oOoOoOo = iIIiiIIIIi . split ( ';' )
 for iiIi1I1ii in oOoOoOo :
  if iiIi1I1ii not in OOoOo0OO :
   OOoOo0OO . append ( iiIi1I1ii )
   if 18 - 18: II + I1 % iiIIi1i1Iii - Ii * IIII . ii1i1ii1I
 oOoOoOo = [ ]
 for iiIi1I1ii in OOoOo0OO :
  if 'path=/' not in iiIi1I1ii and 'HttpOnly' not in iiIi1I1ii :
   oOoOoOo . append ( iiIi1I1ii )
   if 82 - 82: oO0O + O0O - oO0O * II / oooOoO . IIoooO0ooO0oo
 Oo00OooO = '; ' . join ( oOoOoOo ) . replace ( '  ' , ' ' )
 iII1 = 'http://%s/action/Account/Login' % server
 iIi1III11 = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 iIi1III11 [ 'Accept' ] = '*/*'
 iIi1III11 [ 'Accept-Language' ] = 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3'
 iIi1III11 [ 'Accept-Encoding' ] = 'gzip, deflate'
 iIi1III11 [ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=UTF-8'
 iIi1III11 [ 'X-Requested-With' ] = 'XMLHttpRequest'
 iIi1III11 [ 'Referer' ] = IiI1I1II
 iIi1III11 [ 'Cookie' ] = Oo00OooO
 iIi1III11 [ 'Connection' ] = 'keep-alive'
 Ooo0Oo = '__RequestVerificationToken=%s&UserName=amistad&Password=asegurada' % IIiiII111i
 oooO0oo0 = urllib2 . urlopen
 oO00o = urllib2 . Request
 oo0O0 = oO00o ( iII1 , Ooo0Oo , iIi1III11 )
 Ii11 = oooO0oo0 ( oo0O0 )
 iIIiiIIIIi = Ii11 . info ( ) [ 'Set-Cookie' ]
 I11Iii11i1Ii1 = Ii11 . read ( )
 OOoOo0OO = Oo00OooO . split ( ';' )
 oOoOoOo = iIIiiIIIIi . split ( ';' )
 for iiIi1I1ii in oOoOoOo :
  if iiIi1I1ii not in OOoOo0OO :
   OOoOo0OO . append ( iiIi1I1ii )
   if 59 - 59: o00oO0oo0O0O0 - OOO
 oOoOoOo = [ ]
 for iiIi1I1ii in OOoOo0OO :
  if 'path=/' not in iiIi1I1ii and 'HttpOnly' not in iiIi1I1ii :
   oOoOoOo . append ( iiIi1I1ii )
   if 81 - 81: IIII
 Oo00OooO = '; ' . join ( oOoOoOo ) . replace ( '  ' , ' ' )
 iIIiiIIIIi = ''
 iIi1III11 = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 iIi1III11 [ 'Referer' ] = IiI1I1II
 iIi1III11 [ 'Cookie' ] = Oo00OooO
 iIi1III11 [ 'Connection' ] = 'keep-alive'
 Ooo0Oo = 'fileId=%s&__RequestVerificationToken=%s' % ( link , IIiiII111i )
 oooO0oo0 = urllib2 . urlopen
 oO00o = urllib2 . Request
 oo0O0 = oO00o ( iioO , Ooo0Oo , iIi1III11 )
 Ii11 = oooO0oo0 ( oo0O0 )
 I11Iii11i1Ii1 = Ii11 . read ( )
 i1iIii = re . search ( 'DownloadUrl":"(.*?)"' , I11Iii11i1Ii1 )
 return i1iIii . group ( 1 )
 if 17 - 17: i1iI1
 if 50 - 50: i1iI1
def i111 ( link ) :
 oooO00o0oO = re . findall ( 'list=(.*?)(?:&|\s|$)+' , oooo00OoOoOo0 ( link ) , flags = re . DOTALL )
 II11i1iI = [ ]
 if len ( oooO00o0oO ) > 0 :
  for i1ii1i in oooO00o0oO :
   II11i1iI . append ( 'plugin://plugin.video.youtube/playlist/%s/' % str ( oooO00o0oO [ 0 ] ) )
  return II11i1iI
 else :
  return None
  if 77 - 77: OOoOoO0o0o0OO * ii1I1ii1IiIi1
  if 81 - 81: IIII - oO0O
def IiiI1I1I1iIiI ( ser , tit , base , id , type ) :
 iII1Ii1ii11 = int ( sys . argv [ 1 ] )
 try :
  I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( base ) ) )
  if 15 - 15: oO0O - O0O / OOO . iiIIi1i1Iii - OOO + i1iI1
  i1I1IIIII = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL3ZpZXdzLnBocD9pZD0lcyZ0eXBlPSVz' ) ) % ( I11iIiIIi , id , type )
  I1iiI1I ( i1I1IIIII )
  if 17 - 17: O0O - Ii1111I11i1I + IiII1IiI * Ii1111I11i1I
  IIIii1Ii = sqlite3 . connect ( base )
  OO0o = IIIii1Ii . cursor ( )
  if type == 'series' :
   if 59 - 59: IIII - ii1I1ii1IiIi1 . oooOoO % IIII + I1 % IIoooO0ooO0oo
   OO0o . execute ( base64 . urlsafe_b64decode ( 'dXBkYXRlIHNlcmllcyBzZXQgdmlld3M9dmlld3MrMSB3aGVyZSBzZXJpZV9pZCA9ID8=' ) , ( id , ) )
  else :
   if 53 - 53: OOO / IIII - oOO
   OO0o . execute ( base64 . urlsafe_b64decode ( 'dXBkYXRlIHBlbGlzIHNldCB2aWV3cz12aWV3cysxIHdoZXJlIHBlbGlfaWQgPSA_' ) , ( id , ) )
  IIIii1Ii . commit ( )
  IIIii1Ii . close ( )
 except :
  pass
 o0oOOoO = ii11i ( ser )
 xbmc . log ( 'Server %s' % o0oOOoO )
 ser = oooo00OoOoOo0 ( ser )
 tit = base64 . urlsafe_b64decode ( tit )
 if 25 - 25: OOO * Ii1111I11i1I + IIII + oO0O - OOoOoO0o0o0OO
 if 65 - 65: OOO
 if 8 - 8: ii1I1ii1IiIi1 . ii1i1ii1I / IiII1IiI
 if 2 - 2: oOOoO % ii1i1ii1I / Ii1111I11i1I * OOoOoO0o0o0OO
 if 17 - 17: oooOoO % o00oO0oo0O0O0 + o00oO0oo0O0O0 . II
 if 49 - 49: IIoooO0ooO0oo - OOoOoO0o0o0OO * oooOoO
 if 70 - 70: Ii1111I11i1I % IIII % IiII1IiI + Ii
 if 55 - 55: oooOoO
 if o0oOOoO == 'cp' :
  Oo00o0O0oOo0 = i1 ( base64 . urlsafe_b64decode ( 'Y29waWFwb3AuY29t' ) , ser )
  oO0oOOOOOo0 = xbmcgui . ListItem ( path = Oo00o0O0oOo0 . strip ( ) )
  oO0oOOOOOo0 . setInfo ( 'video' , { 'title' : tit } )
  xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , True , oO0oOOOOOo0 )
 elif o0oOOoO == 'kb' :
  Oo00o0O0oOo0 = i1 ( 'kbagi.com' , ser )
  oO0oOOOOOo0 = xbmcgui . ListItem ( path = Oo00o0O0oOo0 . strip ( ) )
  oO0oOOOOOo0 . setInfo ( 'video' , { 'title' : tit } )
  xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , True , oO0oOOOOOo0 )
 elif o0oOOoO == 'dk' :
  Oo00o0O0oOo0 = iIoOOOO00 ( base64 . urlsafe_b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' ) , ser )
  if Oo00o0O0oOo0 == '' :
   IIOo0OoOO = 'El enlace ya no existe'
   oO0oOOOOOo0 = xbmcgui . ListItem ( IIOo0OoOO , iconImage = 'DefaultVideo.png' )
   xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , False , oO0oOOOOOo0 )
   iI = xbmcgui . Dialog ( )
   iI . notification ( 'Palantir' , IIOo0OoOO , xbmcgui . NOTIFICATION_INFO , 5000 )
  else :
   oO0oOOOOOo0 = xbmcgui . ListItem ( path = Oo00o0O0oOo0 . strip ( ) )
   oO0oOOOOOo0 . setInfo ( 'video' , { 'title' : tit } )
   xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , True , oO0oOOOOOo0 )
 elif o0oOOoO == 're' or o0oOOoO == 'yt' :
  if o0oOOoO == 'yt' :
   Oo00o0O0oOo0 = i111 ( ser )
  else :
   Oo00o0O0oOo0 = ser
  oO0oOOOOOo0 = xbmcgui . ListItem ( path = Oo00o0O0oOo0 . strip ( ) )
  oO0oOOOOOo0 . setInfo ( 'video' , { 'title' : tit } )
  xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , True , oO0oOOOOOo0 )
 elif o0oOOoO == 'pt' :
  Oo00o0O0oOo0 = iIoOOOO00 ( base64 . urlsafe_b64decode ( 'aHR0cDovL3BhcnRhZ29yYS5jb20=' ) , ser )
  if Oo00o0O0oOo0 == '' :
   IIOo0OoOO = 'El enlace ya no existe'
   oO0oOOOOOo0 = xbmcgui . ListItem ( IIOo0OoOO , iconImage = 'DefaultVideo.png' )
   xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , False , oO0oOOOOOo0 )
   iI = xbmcgui . Dialog ( )
   iI . notification ( 'Palantir' , IIOo0OoOO , xbmcgui . NOTIFICATION_INFO , 5000 )
  else :
   oO0oOOOOOo0 = xbmcgui . ListItem ( path = Oo00o0O0oOo0 . strip ( ) )
   oO0oOOOOOo0 . setInfo ( 'video' , { 'title' : tit } )
   xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , True , oO0oOOOOOo0 )
 elif o0oOOoO == 'sc' :
  IiIIIii1ii = ser . split ( ' ' )
  while 1 == 1 :
   if not IiIIIii1ii :
    IIOo0OoOO = 'Video en preparaci\xc3\xb3n'
    oO0oOOOOOo0 = xbmcgui . ListItem ( IIOo0OoOO , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , False , oO0oOOOOOo0 )
    iI = xbmcgui . Dialog ( )
    iI . notification ( 'Palantir' , IIOo0OoOO , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   for i11II1IIiii1i in IiIIIii1ii :
    IiIIIii1ii . remove ( i11II1IIiii1i )
    i1I1IIIII = i11II1IIiii1i
    I11Iii11i1Ii1 = I1iiI1I ( i11II1IIiii1i )
    if '<h1>File Not Found</h1>' in I11Iii11i1Ii1 or '<h1>Archivo no encontrado</h1>' in I11Iii11i1Ii1 or I11Iii11i1Ii1 == 'Not Found' :
     I11Iii11i1Ii1 = ''
    else :
     break
     if 66 - 66: I1 / oooOoO
   if I11Iii11i1Ii1 == '' :
    IIOo0OoOO = 'El enlace ya no existe'
    oO0oOOOOOo0 = xbmcgui . ListItem ( IIOo0OoOO , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , False , oO0oOOOOOo0 )
    iI = xbmcgui . Dialog ( )
    iI . notification ( 'Palantir' , IIOo0OoOO , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   Oo00o0O0oOo0 = re . findall ( 'file\\: "([^"]+)"' , I11Iii11i1Ii1 , flags = re . DOTALL )
   if not Oo00o0O0oOo0 :
    Ooo0Oo = ''
    i1II11II11I = re . findall ( '<input.*?name="([^"]+)".*?value="([^"]*)">' , I11Iii11i1Ii1 , flags = re . DOTALL )
    for OOO00oO00OoO0 , i1iiI1i1II in i1II11II11I :
     Ooo0Oo += OOO00oO00OoO0 + '=' + i1iiI1i1II + '&'
     if 11 - 11: OOO / i1iI1 - O0O / oooOoO
    Ooo0Oo = Ooo0Oo . replace ( 'op=download1' , 'op=download2' )
    I11Iii11i1Ii1 = I1iiI1I ( i1I1IIIII , post = Ooo0Oo )
    if 'id="justanotice"' in I11Iii11i1Ii1 :
     return [ ]
    Oo00o0O0oOo0 = re . findall ( 'file\\: "([^"]+)"' , I11Iii11i1Ii1 , flags = re . DOTALL )
   try :
    Oo00o0O0oOo0 = Oo00o0O0oOo0 [ 0 ]
    oO0oOOOOOo0 = xbmcgui . ListItem ( path = Oo00o0O0oOo0 )
    oO0oOOOOOo0 . setInfo ( 'video' , { 'title' : tit } )
    xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , True , oO0oOOOOOo0 )
    break
   except :
    pass
 else :
  IIOo0OoOO = 'Servidor no soportado'
  oO0oOOOOOo0 = xbmcgui . ListItem ( IIOo0OoOO , iconImage = 'DefaultVideo.png' )
  xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , False , oO0oOOOOOo0 )
  iI = xbmcgui . Dialog ( )
  iI . notification ( 'Palantir' , IIOo0OoOO , xbmcgui . NOTIFICATION_INFO , 5000 )
  if 90 - 90: oO0O * IIII + OOO % IIII - oOO
  if 70 - 70: IIII + ii1I1ii1IiIi1 * ii1i1ii1I % O0O + OOoOoO0o0o0OO - I1
def Oo0 ( bas , data ) :
 O0O0oOoOo00 = data . split ( '.' )
 if O0O0oOoOo00 [ 0 ] == 'cp' :
  O0O0oOoOo00 = i1 ( base64 . urlsafe_b64decode ( 'Y29waWFwb3AuY29t' ) , O0O0oOoOo00 [ 1 ] )
 elif O0O0oOoOo00 [ 0 ] == 'dk' :
  O0O0oOoOo00 = iIoOOOO00 ( base64 . urlsafe_b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' ) , O0O0oOoOo00 [ 1 ] )
 else :
  if 29 - 29: oOOoO
  O0O0oOoOo00 = base64 . urlsafe_b64decode ( 'JXMvbW9yaWEuY21w' ) % data
 data = I1iiI1I ( O0O0oOoOo00 )
 try :
  data = zlib . decompress ( data )
 except :
  pass
 I1Iii1 = open ( bas , 'wb' )
 I1Iii1 . write ( data )
 I1Iii1 . close ( )
 IIIii1Ii = sqlite3 . connect ( bas )
 OO0o = IIIii1Ii . cursor ( )
 if 10 - 10: Ii % o00oO0oo0O0O0 - oooOoO - IIoooO0ooO0oo * oOO
 OO0o . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IHZlcnNpb24sIChzZWxlY3QgY291bnQoKikgZnJvbSBzZXJpZXMpIGFzIGNudCBmcm9tIHZlcnNpb24=' ) )
 Oo0i1III11I1i = OO0o . fetchone ( )
 IIIii1Ii . close ( )
 IIOo0OoOO = 'Vers. %s (%s contenido diferente)' % ( Oo0i1III11I1i [ 0 ] , Oo0i1III11I1i [ 1 ] )
 xbmcgui . Dialog ( ) . notification ( 'Palantir' , IIOo0OoOO , xbmcgui . NOTIFICATION_INFO , 5000 )
 if 83 - 83: Ii . IIII + iiIIi1i1Iii % Ii1111I11i1I % II
 if 40 - 40: IIII
def I11I11iii1 ( bas ) :
 I11iIiIIi = I111I11I11111 ( bas )
 if I11iIiIIi == '' :
  I11iIiIIi = OOo0000oO ( )
 I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I11iIiIIi ) )
 import xbmcaddon
 OoooO = xbmcaddon . Addon ( )
 o00 = xbmc . translatePath ( OoooO . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
 if os . path . isfile ( bas ) :
  try :
   if 5 - 5: oOO - IiII1IiI . IIII
   Oo0i1III11I1i = I1iiI1I ( base64 . urlsafe_b64decode ( 'JXMvYmFscm9nLmluZm8=' ) % I11iIiIIi )
   Oo00o000O = Oo0i1III11I1i . split ( ' ' )
   try :
    IIIii1Ii = sqlite3 . connect ( bas )
    OO0o = IIIii1Ii . cursor ( )
    if 88 - 88: iiIIi1i1Iii + ii1I1ii1IiIi1 % O0O . OOO
    OO0o . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IHZlcnNpb24sIHZlcnNpb25fYWRkb24sIGRhdGEgZnJvbSB2ZXJzaW9u' ) )
    oO = OO0o . fetchone ( )
    IIIii1Ii . close ( )
    IIIiI = str ( oO [ 0 ] )
    if int ( IIIiI ) < int ( Oo00o000O [ 0 ] ) :
     if 21 - 21: Ii
     Oo0 ( bas , oooo00OoOoOo0 ( Oo00o000O [ 1 ] . strip ( ) ) )
     IIIii1Ii = sqlite3 . connect ( bas )
     OO0o = IIIii1Ii . cursor ( )
     if 27 - 27: oooOoO . Ii1111I11i1I - oOOoO
     OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG1lbnNhamVfdXBkYXRlLCBub3RpZmljYWNpb25fdXBkYXRlIGZyb20gdmVyc2lvbg==' ) )
     oO = OO0o . fetchone ( )
     IIIii1Ii . close ( )
     if oO [ 1 ] :
      xbmcgui . Dialog ( ) . notification ( 'Palantir' , oO [ 0 ] , xbmcgui . NOTIFICATION_INFO , 5000 )
     if oO [ 0 ] :
      xbmcgui . Dialog ( ) . ok ( 'Palantir' , oO [ 0 ] )
   except :
    Oo0 ( bas , oooo00OoOoOo0 ( Oo00o000O [ 1 ] . strip ( ) ) )
  except ( HTTPError , URLError ) as iiI1IIiI :
   traceback . print_exc ( file = sys . stdout )
   IIOo0OoOO = 'El plugin no puede ser actualizado'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , IIOo0OoOO , xbmcgui . NOTIFICATION_WARNING , 5000 )
   if 65 - 65: O0O / iiIIi1i1Iii * oOO . Oo00O0oOooO0O
 else :
  try :
   Oo0i1III11I1i = I1iiI1I ( base64 . urlsafe_b64decode ( 'JXMvYmFscm9nLmluZm8=' ) % I11iIiIIi )
   Oo00o000O = Oo0i1III11I1i . split ( ' ' )
   Oo0 ( bas , oooo00OoOoOo0 ( Oo00o000O [ 1 ] . strip ( ) ) )
   IIIii1Ii = sqlite3 . connect ( bas )
   OO0o = IIIii1Ii . cursor ( )
   if 47 - 47: Ii1111I11i1I
   OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG1lbnNhamVfaW5pY2lhbCBmcm9tIHZlcnNpb24=' ) )
   oO = OO0o . fetchone ( )
   IIIii1Ii . close ( )
   if oO [ 0 ] :
    xbmcgui . Dialog ( ) . ok ( 'Palantir' , oO [ 0 ] )
  except HTTPError :
   IIOo0OoOO = 'El plugin no se puede cargar'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , IIOo0OoOO , xbmcgui . NOTIFICATION_ERROR , 5000 )
   xbmc . executebuiltin ( 'Action(Back)' )
   if 3 - 3: ii1I1ii1IiIi1
 if os . path . isfile ( base64 . urlsafe_b64decode ( 'JXMvaXRoaWwucHk=' ) % o00 ) :
  os . remove ( base64 . urlsafe_b64decode ( 'JXMvaXRoaWwucHk=' ) % o00 )
  if 9 - 9: iiIIi1i1Iii
 IIIii1Ii = sqlite3 . connect ( bas )
 OO0o = IIIii1Ii . cursor ( )
 if 16 - 16: O0O * ii1I1ii1IiIi1
 OO0o . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IHZlcnNpb24sIHZlcnNpb25fYWRkb24sIGRhdGEgZnJvbSB2ZXJzaW9u' ) )
 oO = OO0o . fetchone ( )
 IIIii1Ii . close ( )
 iIIiiI = OoooO . getAddonInfo ( 'version' ) . decode ( 'utf-8' )
 if int ( iIIiiI . replace ( '.' , '' ) ) < oO [ 1 ] :
  I1II1 = oO [ 2 ] . split ( ' ' )
  for i1ii1i , o0o0ooo00OOo0 in zip ( I1II1 [ 0 : : 2 ] , I1II1 [ 1 : : 2 ] ) :
   I11Iii11i1Ii1 = zlib . decompress ( base64 . b64decode ( o0o0ooo00OOo0 ) )
   I1Iii1 = open ( '%s/%s' % ( o00 , base64 . b64decode ( i1ii1i ) ) , 'wb' )
   I1Iii1 . write ( I11Iii11i1Ii1 )
   I1Iii1 . close ( )
   if 46 - 46: Ii1111I11i1I * ii1I1ii1IiIi1 . oooOoO * oOO % OOO
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')