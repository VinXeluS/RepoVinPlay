import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import base64
import os
import sqlite3
import sys
import unicodedata
import urlparse
from urlparse import parse_qsl
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
import xbmc
import xbmcaddon
import xbmcgui
import xbmcplugin
import anor
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
import ithil
if 5 - 5: i1iI1 + o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - IiII1IiI
try :
 import json
except :
 import simplejson as json
 if 85 - 85: oo
 if 70 - 70: iIi11 + Ii1I / I1IiI1III11i + ooOooO0OOO % IiII1i1I / iIi11
def oo0o ( s ) :
 return '' . join ( ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' ) )
 if 95 - 95: IIoooO0ooO0oo - iIi11 + I1IiI1III11i + IiII1i1I
 if 56 - 56: Ii / ooOooO0OOO + iiIIi1i1Iii . oOO * iiIIi1i1Iii . I1
def O0000O ( bas ) :
 ithil . I11I11iii1 ( bas )
 if 76 - 76: iIi11 * IiII1i1I % oOO - IiII1i1I / oOO
 if 79 - 79: OOoOoO0o0o0OO + Ii1I - iIi11
def IiiiIiI1IIi ( ) :
 import xbmc
 O0ooOo0 = xbmc . Keyboard ( "" )
 O0ooOo0 . doModal ( )
 IiooO0o0000 = ''
 if ( O0ooOo0 . isConfirmed ( ) ) :
  IiooO0o0000 = O0ooOo0 . getText ( )
 return IiooO0o0000
 if 51 - 51: iiIIi1i1Iii % i1iI1 % oooOoO % OOoOoO0o0o0OO * Ii % OOoOoO0o0o0OO
 if 56 - 56: ii1I1ii1IiIi1 . oooOoO * Ii
 if 63 - 63: OOoOoO0o0o0OO . iiIIi1i1Iii / IIoooO0ooO0oo . Ii / IIoooO0ooO0oo % ii1I1ii1IiIi1
I111i11I1I = 'utf-8'
i11ii = '.tmp'
o0O0oO0 = 'action'
IIIi1111iI = xbmcaddon . Addon ( )
iiIIiiiI11 = IIIi1111iI . getAddonInfo ( 'version' )
O00O000 = xbmc . translatePath ( IIIi1111iI . getAddonInfo ( 'path' ) . decode ( I111i11I1I ) )
O0OOO = xbmc . translatePath ( IIIi1111iI . getAddonInfo ( 'profile' ) . decode ( I111i11I1I ) )
iIi11iI1ii1I = os . path . join ( O00O000 , "resources/media/" )
if 91 - 91: i1iI1 / oooOoO / iiIIi1i1Iii + OOoOoO0o0o0OO / ii1I1ii1IiIi1 . ooOooO0OOO
iiI = base64 . urlsafe_b64decode ( 'JXMvbW9yaWElcw==' ) % ( O0OOO , i11ii )
oo000OoOOO0Oo = '%s/bree.fav' % O0OOO
o0O0o = [ "serie_id" , "nombre" , "link" , "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "has_content" , "audio" ,
 "category" , "date(updated)" ]
oo0oO0OO0OO0O = [ "peli_id" , "nombre" , "link" , "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "'N'" , "audio" , "category" ,
 "date(updated)" ]
I1I1i = [ "peli_id" , "''" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" ,
 "sinopsis" ,
 "caratula" , "poster"
 ]
iIiiIIi1III1 = 200
OOooO = ", CASE When unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198 Then 'A'When unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207 Then 'I'When unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203 Then 'E'When unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220 Then 'U'When unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214 Then 'O' WHEN unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90 THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa "
o00 = 'series'
if 34 - 34: Ii1I + I1IiI1III11i
if not os . path . exists ( O0OOO ) :
 try :
  os . makedirs ( O0OOO )
 except :
  pass
Iii1I1i = urlparse . parse_qs ( sys . argv [ 2 ] [ 1 : ] )
o00I11Iii11i1Ii1 = sys . argv [ 0 ]
iiII = int ( sys . argv [ 1 ] )
try :
 if 51 - 51: IIII / iiIIi1i1Iii
 oOOO0O0 = anor . I1i1I1iI11I ( base64 . urlsafe_b64decode (
 'c2VsZWN0IGlkUGF0aCBmcm9tIHBhdGggd2hlcmUgc3RyUGF0aD0icGx1Z2luOi8vcGx1Z2luLnZpZGVvLnBhbGFudGlyLyI=' ) ) [ 1 ] [ 0 ] [ 0 ]
except :
 oOOO0O0 = 0
 if 67 - 67: ii1I1ii1IiIi1 - ooOooO0OOO + oooOoO * I1
 if 29 - 29: oo . OOoOoO0o0o0OO / II - I1IiI1III11i / iIi11 . I1
def I1iIi11Ii1I11 ( path , type = 'r' ) :
 iiIIi1ii = open ( str ( path ) , type )
 O0OOo = iiIIi1ii . read ( )
 iiIIi1ii . close ( )
 return O0OOo
 if 4 - 4: IiII1i1I % IiII1IiI
 if 15 - 15: oo / IiII1i1I
if os . path . exists ( oo000OoOOO0Oo ) == True :
 i1I = json . loads ( base64 . urlsafe_b64decode ( I1iIi11Ii1I11 ( oo000OoOOO0Oo ) ) )
else :
 i1I = { }
 if 16 - 16: OOoOoO0o0o0OO / o00oO0oo0O0O0 . II
 if 96 - 96: I1 * oOO . ooOooO0OOO
def iIiI1iiII1Ii ( nombre , caratula = None , poster = None , video = { } , isPlayable = False ) :
 ooOoO0O0 = xbmcgui . ListItem ( label = nombre , iconImage = caratula )
 if caratula and poster :
  ooOoO0O0 . setArt ( i1iIii ( caratula , poster ) )
 if len ( video ) > 0 :
  ooOoO0O0 . setInfo ( 'video' , video )
 if isPlayable :
  ooOoO0O0 . setProperty ( 'IsPlayable' , 'true' )
 return ooOoO0O0
 if 79 - 79: iiIIi1i1Iii - o00oO0oo0O0O0 % OOO
 if 39 - 39: oOO - OOO / ooOooO0OOO . Ii1I . Ii1I . Ii
 if 88 - 88: o00oO0oo0O0O0 % II - ooOooO0OOO
def o0OO ( idFile , idPath , fileName , to_watch ) :
 if to_watch :
  Oo0oOOOO = ( 'Marcar como visto' , 'XBMC.RunPlugin(%s?action=to_watch&idFile=%s&idPath=%s&fileName=%s)' % (
 o00I11Iii11i1Ii1 , idFile , idPath , base64 . urlsafe_b64encode ( fileName ) ) )
 else :
  Oo0oOOOO = ( 'Marcar como no visto' ,
 'XBMC.RunPlugin(%s?action=to_unwatch&idFile=%s&idPath=%s&fileName=%s)' % (
 o00I11Iii11i1Ii1 , idFile , idPath , base64 . urlsafe_b64encode ( fileName ) ) )
 return Oo0oOOOO
 if 86 - 86: OOO
 if 78 - 78: oo * ii1I1ii1IiIi1 + OOoOoO0o0o0OO / iIi11 - ooOooO0OOO + Ii
def IiI ( idFile , idPath , fileName , to_watch ) :
 fileName = base64 . urlsafe_b64decode ( fileName )
 if to_watch :
  IIii1IIIi11 = 1
 else :
  IIii1IIIi11 = 0
 if int ( idFile ) > 0 :
  Iii1 = "update files set playCount=%s where idFile=%s AND idPath=%s AND strFilename='%s'" % (
 IIii1IIIi11 , idFile , idPath , fileName )
 else :
  Iii1 = "insert into files (idFile, idPath, strFilename, playCount, lastPlayed) VALUES (%s, %s, '%s', %s, %s)" % (
 '(select max (idFile) +1 from files)' , idPath , fileName , IIii1IIIi11 , "datetime('now')" )
 anor . I1i1I1iI11I ( Iii1 )
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 4 - 4: Ii % IIoooO0ooO0oo - iIi11 / I1IiI1III11i - II + IiII1i1I
 if 45 - 45: IIII
 if 97 - 97: OOoOoO0o0o0OO % OOO * IIII % oo - oo
def oOoOOo ( id , type , nombre , url , caratula , poster , refresh = None ) :
 try :
  nombre = nombre . encode ( 'utf-8' , 'ignore' )
 except ( UnicodeEncodeError , UnicodeDecodeError ) :
  pass
 if not caratula :
  caratula = 'None'
 if not poster :
  poster = 'None'
 if id not in i1I :
  Oo0oOOOO = ( 'Añadir a tus favoritos Palantir' ,
 'XBMC.RunPlugin(%s?action=addfav&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&type=%s)' % (
 o00I11Iii11i1Ii1 , id , base64 . urlsafe_b64encode ( nombre ) , base64 . urlsafe_b64encode ( url ) ,
 base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , type ) )
 else :
  Oo0oOOOO = ( 'Eliminar de tus favoritos Palantir' ,
 'XBMC.RunPlugin(%s?action=rmfav&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&refresh=%s&type=%s)' % (
 o00I11Iii11i1Ii1 , id , base64 . urlsafe_b64encode ( nombre ) , base64 . urlsafe_b64encode ( url ) ,
 base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , refresh , type ) )
 return Oo0oOOOO
 if 11 - 11: iIi11 + IIoooO0ooO0oo - iIi11
 if 50 - 50: I1 / ii1I1ii1IiIi1 - i1iI1 + iIi11 . Ii . IIII
def iii1iIII1111I ( options ) :
 i11i1 = json . loads ( base64 . urlsafe_b64decode ( I1iIi11Ii1I11 ( oo000OoOOO0Oo ) ) )
 i11i1 . pop ( options [ 'id' ] , None )
 iI1 = open ( oo000OoOOO0Oo , "w" )
 iI1 . write ( base64 . urlsafe_b64encode ( json . dumps ( i11i1 ) ) )
 iI1 . close ( )
 if 'refresh' in options and options [ 'refresh' ] :
  xbmc . executebuiltin ( "XBMC.Container.Refresh" )
  if 94 - 94: oooOoO
  if 75 - 75: IiII1i1I * IiII1IiI * IIII + Ii % iiIIi1i1Iii
def O0O00O0O ( ) :
 IiiiIiiIII = [ ]
 if os . path . exists ( oo000OoOOO0Oo ) == False :
  I1IiiI = open ( oo000OoOOO0Oo , "w" )
  I1IiiI . write ( base64 . urlsafe_b64encode ( json . dumps ( { } ) ) )
  I1IiiI . close ( )
 else :
  items = json . loads ( base64 . urlsafe_b64decode ( I1iIi11Ii1I11 ( oo000OoOOO0Oo ) ) )
  for Ooo , o0OOoo0 in items . iteritems ( ) :
   ii1Ii = o0OOoo0 [ 0 ] . encode ( 'utf-8' )
   OOOO0 = o0OOoo0 [ 1 ] . encode ( 'utf-8' )
   try :
    if 42 - 42: iIi11 * oooOoO . IiII1IiI + IIII * OOoOoO0o0o0OO
    OOOO0 = o0OOoo0 [ 1 ] . encode ( 'utf-8' , 'ignore' )
   except :
    pass
   ooIIII = o0OOoo0 [ 2 ] . encode ( 'utf-8' )
   O0oOooOoOo0 = o0OOoo0 [ 3 ] . encode ( 'utf-8' )
   oOO00OoO0oo = o0OOoo0 [ 4 ] . encode ( 'utf-8' )
   oo0o0ooooO = o0OOoo0 [ 5 ] . encode ( 'utf-8' )
   O000000O0OoOo = base64 . urlsafe_b64decode ( oOO00OoO0oo )
   OoOO0OO0o0O = base64 . urlsafe_b64decode ( O0oOooOoOo0 )
   OOOO0 = base64 . urlsafe_b64decode ( OOOO0 )
   IIiiII111i = False
   if len ( ii1Ii . split ( '-' ) ) == 3 :
    IIiiII111i = True
   ooOoO0O0 = iIiI1iiII1Ii ( nombre = OOOO0 , caratula = OoOO0OO0o0O , poster = O000000O0OoOo , isPlayable = IIiiII111i )
   ooOoO0O0 . addContextMenuItems ( [ oOoOOo ( id = str ( o0OOoo0 [ 0 ] ) , nombre = OOOO0 , url = ooIIII ,
 caratula = O0oOooOoOo0 , poster = oOO00OoO0oo , refresh = True , type = oo0o0ooooO ) ] )
   if 11 - 11: ooOooO0OOO
   IiiiIiiIII . append ( ( base64 . urlsafe_b64decode ( ooIIII ) , ooOoO0O0 , not IIiiII111i ) )
 try :
  if 23 - 23: oooOoO * OOO % iIi11 . IiII1i1I
  xbmc . executebuiltin ( "Container.SetViewMode(500)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
 xbmcplugin . endOfDirectory ( iiII )
 if 29 - 29: II - IIoooO0ooO0oo % I1IiI1III11i / II * ooOooO0OOO % II
 if 95 - 95: i1iI1
def I11IIii1I ( options ) :
 I1i11i1I1iIi = { }
 OOOO0 = options [ 'nombre' ]
 O0oOo0O0OO = False
 if os . path . exists ( oo000OoOOO0Oo ) == False :
  I1i11i1I1iIi [ options [ 'id' ] ] = (
 options [ 'id' ] , options [ 'nombre' ] , options [ 'url' ] , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
  I1IiiI = open ( oo000OoOOO0Oo , "w" )
  I1IiiI . write ( base64 . urlsafe_b64encode ( json . dumps ( I1i11i1I1iIi ) ) )
  I1IiiI . close ( )
 else :
  xbmc . log ( 'poster %s' % options [ 'poster' ] )
  i11i1 = json . loads ( base64 . urlsafe_b64decode ( I1iIi11Ii1I11 ( oo000OoOOO0Oo ) ) )
  i11i1 [ options [ 'id' ] ] = ( options [ 'id' ] , options [ 'nombre' ] , options [ 'url' ] , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
  iI1 = open ( oo000OoOOO0Oo , "w" )
  iI1 . write ( base64 . urlsafe_b64encode ( json . dumps ( i11i1 ) ) )
  iI1 . close ( )
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 O0oo00 = xbmcgui . Dialog ( )
 O0oo00 . notification ( 'Palantir' ,
 'Favorito añadido a tus [COLOR gold]%s[/COLOR] Palantir' % options [ 'type' ] ,
 xbmcgui . NOTIFICATION_INFO , 3000 )
 if 80 - 80: IiII1IiI * iiIIi1i1Iii / oOO / Ii1I / OOO + o00oO0oo0O0O0
 if 81 - 81: II - ii1I1ii1IiIi1 / iIi11 + oooOoO
def i1iIii ( caratula , poster ) :
 if caratula == None :
  caratula = ''
 if poster == None :
  poster = ''
 return { 'icon' : caratula , 'fanart' : poster , 'thumb' : caratula }
 if 51 - 51: IiII1IiI + II + IiII1i1I . II
 if 86 - 86: OOO / IiII1IiI * IiII1IiI * o00oO0oo0O0O0
 if 90 - 90: I1 - IiII1i1I % OOoOoO0o0o0OO - OOO . i1iI1 / IIII
def Iiooo ( dimension ) :
 if dimension :
  i1IoO = dimension . split ( "x" )
  if len ( i1IoO ) == 2 :
   OoO0OO = int ( i1IoO [ 0 ] )
   i1II1 = int ( i1IoO [ 1 ] )
   if OoO0OO == 0 or i1II1 == 0 :
    return ""
   elif OoO0OO <= 720 and i1II1 <= 480 :
    return "[COLOR oldlace](SD)[/COLOR]"
   elif OoO0OO <= 768 and i1II1 <= 576 :
    return "[COLOR moccasin](HD)[/COLOR]"
   elif OoO0OO <= 960 and i1II1 <= 544 :
    return "[COLOR peachpuff](HD)[/COLOR]"
   elif OoO0OO <= 1280 and i1II1 <= 720 :
    return "[COLOR sandybrown](720)[/COLOR]"
   else :
    return "[COLOR chocolate](1080)[/COLOR]"
  else :
   return ""
 return ""
 if 17 - 17: oOO - IIII + I1
 if 27 - 27: I1
 if 63 - 63: o00oO0oo0O0O0
def I1iii1 ( serie_sinop , serie_caratula , serie_poster , temp_sinop , temp_caratula , temp_poster ) :
 i11i1 = [ ]
 if temp_sinop == None :
  i11i1 . append ( serie_sinop )
 else :
  i11i1 . append ( temp_sinop )
 if temp_caratula == None :
  i11i1 . append ( serie_caratula )
 else :
  i11i1 . append ( temp_caratula )
 if temp_poster == None :
  i11i1 . append ( serie_poster )
 else :
  i11i1 . append ( temp_poster )
 return i11i1
 if 43 - 43: I1 % IiII1IiI
 if 29 - 29: IIII . ooOooO0OOO . ooOooO0OOO % oo + I1IiI1III11i - I1IiI1III11i
 if 74 - 74: Ii / oooOoO
def IIIIoo ( operator , value , params ) :
 iiIiii1 = sqlite3 . connect ( iiI )
 Oo0ooO00 = iiIiii1 . cursor ( )
 IIIII = 1
 if 'page' in params and 'c_page' in params and 'alfa' in params :
  IIIII = int ( params [ 'c_page' ] )
  Oo0ooO00 . execute ( "Select " + "," . join (
 o0O0o ) + OOooO + " from series where lower(category) " + operator + " ? AND " + base64 . urlsafe_b64decode (
 params [ 'alfa' ] ) + " AND " + base64 . urlsafe_b64decode (
 params [ 'page' ] ) + " order by alfa asc, nombre asc LIMIT " + str ( iIiiIIi1III1 ) , ( value , ) )
 else :
  params [ 'c_page' ] = 1
  Oo0ooO00 . execute ( "Select " + "," . join (
 o0O0o ) + OOooO + " from series where lower(category) " + operator + " ? order by alfa asc, nombre asc LIMIT " + str (
 iIiiIIi1III1 ) , ( value , ) )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 iiIiii1 . close ( )
 params [ 'c_page' ] = IIIII
 I11 ( Ii1iI1i1iI1iI , False , True , False , params )
 if 33 - 33: Ii1I - i1iI1
 if 85 - 85: II % iiIIi1i1Iii - i1iI1 - oOO
def o0Oo0oo00 ( fields , table ) :
 iiIiii1 = sqlite3 . connect ( iiI )
 Oo0ooO00 = iiIiii1 . cursor ( )
 Oo0ooO00 . execute ( "Select " + "," . join ( fields ) + " from " + table + " order by updated desc limit 200" )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 iiIiii1 . close ( )
 I11 ( Ii1iI1i1iI1iI , True , True , True )
 if 15 - 15: oo - I1IiI1III11i / OOO . iiIIi1i1Iii - OOO + i1iI1
 if 17 - 17: I1IiI1III11i - IiII1i1I + IiII1IiI * IiII1i1I
def OooO0OOo0 ( ) :
 iiIiii1 = sqlite3 . connect ( iiI )
 Oo0ooO00 = iiIiii1 . cursor ( )
 Oo0ooO00 . execute ( "Select " + "," . join ( o0O0o ) + " from series order by views desc, nombre asc limit 200" )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 iiIiii1 . close ( )
 I11 ( Ii1iI1i1iI1iI , True , True , False )
 if 32 - 32: IIoooO0ooO0oo - OOO / oooOoO
 if 8 - 8: IiII1i1I
def iiIIiIi11II1 ( serie_attr , type ) :
 i1iIiIiIi = IiiiIiI1IIi ( )
 if i1iIiIiIi :
  iiIiii1 = sqlite3 . connect ( iiI )
  Oo0ooO00 = iiIiii1 . cursor ( )
  if 58 - 58: IiII1IiI * OOoOoO0o0o0OO
  i1iIiIiIi = '%' + i1iIiIiIi + '%'
  try :
   Oo0ooO00 . execute ( "Select " + "," . join (
 serie_attr ) + OOooO + " from " + type + " where nombre like ? order by alfa asc, nombre asc" ,
 ( unicode ( i1iIiIiIi . decode ( 'utf-8' ) ) , ) )
  except :
   Oo0ooO00 . execute ( "Select " + "," . join (
 serie_attr ) + OOooO + " from " + type + " where nombre like ? order by alfa asc, nombre asc" ,
 ( oo0o ( unicode ( i1iIiIiIi . decode ( 'utf-8' ) ) ) . upper ( ) , ) )
  Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
  if len ( Ii1iI1i1iI1iI ) == 0 :
   Oo0ooO00 . execute ( "Select " + "," . join ( serie_attr ) + " from " + type + " where nombre like ? order by nombre asc" ,
 ( oo0o ( unicode ( i1iIiIiIi . decode ( 'utf-8' ) ) ) . upper ( ) , ) )
   Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
  iiIiii1 . close ( )
  if type == o00 :
   I11 ( Ii1iI1i1iI1iI , True , True , False )
  else :
   Oo000ooO0OO ( Ii1iI1i1iI1iI , 'pelis' )
   if 52 - 52: o00oO0oo0O0O0
   if 23 - 23: ii1I1ii1IiIi1 + I1IiI1III11i + OOoOoO0o0o0OO
   if 63 - 63: iIi11 - iIi11 * i1iI1 . Ii - o00oO0oo0O0O0
def IIiI11 ( audio = None , category = 'General' ) :
 if not audio :
  iiIiii1 = sqlite3 . connect ( iiI )
  Oo0ooO00 = iiIiii1 . cursor ( )
  Oo0ooO00 . execute ( "Select audio,count(audio) from series where audio!='Castellano' group by audio order by audio" )
  Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
  iiIiii1 . close ( )
  IiiiIiiIII = [ ]
  for iIiIIiI1iIIIi in Ii1iI1i1iI1iI :
   audio = iIiIIiI1iIIIi [ 0 ]
   IiiI = iIiIIiI1iIIIi [ 1 ]
   OOO0OOooo0oOo = '[COLOR gold]%s[/COLOR] (%s)' % ( audio , IiiI )
   ooOoO0O0 = iIiI1iiII1Ii ( nombre = OOO0OOooo0oOo , caratula = '' )
   ooIIII = '{0}?action=seriesByLang&lang={1}' . format ( o00I11Iii11i1Ii1 , audio )
   iIi11II11 = True
   IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , iIi11II11 ) )
  try :
   if 41 - 41: iIi11 % ooOooO0OOO - IiII1i1I * IIoooO0ooO0oo
   xbmc . executebuiltin ( "Container.SetViewMode(502)" )
  except :
   pass
  xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
  xbmcplugin . endOfDirectory ( iiII )
 else :
  Ii1iI1i1iI1iI = IiI11IiI1iI11 ( "series" , o0O0o , [ "audio" ] , [ audio ] , [ "nombre" ] )
  I11 ( Ii1iI1i1iI1iI , True , None , False )
  if 23 - 23: Ii1I - iiIIi1i1Iii
  if 70 - 70: Ii + iiIIi1i1Iii - oooOoO + i1iI1
def I1111Ii1I ( letra = None , type = '' ) :
 o00O = { 'A' : 'unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198' ,
 'E' : 'unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203' ,
 'I' : 'unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207' ,
 'O' : 'unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214' ,
 'U' : 'unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220' }
 I11I1Iii = '!0-9..'
 Oo0 = 'unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90'
 if type == 'serie' :
  O0O0oOoOo00 = o0O0o
 else :
  O0O0oOoOo00 = oo0oO0OO0OO0O
 if not letra :
  ii11iIIII1Ii = "" . join ( [ "When " + Oo0i1III11I1i + " Then '" + Oo + "'" for Oo , Oo0i1III11I1i in o00O . iteritems ( ) ] )
  iiIiii1 = sqlite3 . connect ( iiI )
  Oo0ooO00 = iiIiii1 . cursor ( )
  Oo0ooO00 . execute (
 "select alfa, count (alfa) from (select CASE " + ii11iIIII1Ii + " WHEN " + Oo0 + " THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa, nombre, " + type + "_id from " + type + "s) group by alfa order by alfa" )
  Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
  iiIiii1 . close ( )
  IiiiIiiIII = [ ]
  for iIiIIiI1iIIIi in Ii1iI1i1iI1iI :
   letra = iIiIIiI1iIIIi [ 0 ]
   IiiI = iIiIIiI1iIIIi [ 1 ]
   OOO0OOooo0oOo = '[COLOR gold]%s[/COLOR] (%s)' % ( letra , IiiI )
   ooOoO0O0 = iIiI1iiII1Ii ( nombre = OOO0OOooo0oOo , caratula = '' )
   ooIIII = '{0}?action={1}sByAZ&letra={2}' . format ( o00I11Iii11i1Ii1 , type , letra )
   iIi11II11 = True
   IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , iIi11II11 ) )
  try :
   if 42 - 42: iIi11
   xbmc . executebuiltin ( "Container.SetViewMode(502)" )
  except :
   pass
  xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
  xbmcplugin . endOfDirectory ( iiII )
 else :
  iiIiii1 = sqlite3 . connect ( iiI )
  Oo0ooO00 = iiIiii1 . cursor ( )
  if letra in o00O :
   o00O [ letra ] = o00O [ letra ] + ' OR'
  elif letra == I11I1Iii :
   o00O [ letra ] = "AND" . join ( [ " NOT ( " + Oo0i1III11I1i + ") " for Oo , Oo0i1III11I1i in o00O . iteritems ( ) ] ) + " AND NOT (" + Oo0 + ") OR"
  else :
   o00O [ letra ] = ''
  if type == 'peli' :
   O0O0oOoOo00 = I1I1i
  Oo0ooO00 . execute (
 "select " + "," . join ( O0O0oOoOo00 ) + " from " + type + "s where " + o00O [ letra ] + " upper(substr(nombre, 1, 1)) == ? order by nombre" ,
 ( letra , ) )
  Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
  iiIiii1 . close ( )
  if type == 'peli' :
   Oo000ooO0OO ( Ii1iI1i1iI1iI , type = 'pelis' )
  else :
   I11 ( Ii1iI1i1iI1iI , True , True , False )
   if 29 - 29: II * Ii + II . oo * ooOooO0OOO
   if 98 - 98: I1IiI1III11i % II / oo / ooOooO0OOO
   if 57 - 57: IIII . II
def Oo00oOO ( ) :
 ii11Ii11i = [ ]
 ii11Ii11i . append ( { 'title' : 'Series' , o0O0oO0 : o00 , 'ico' : o00 , 'fan' : 'fanart_palantir' } )
 ii11Ii11i . append ( { 'title' : 'Series A-Z' , o0O0oO0 : 'seriesByAZ' , 'ico' : o00 , 'fan' : 'fanart_palantir' } )
 ii11Ii11i . append ( { 'title' : 'Series Infantiles' , o0O0oO0 : 'seriesInf' , 'ico' : 'dibujos' , 'fan' : 'fanart_palantir' } )
 ii11Ii11i . append ( { 'title' : 'Series Retro' , o0O0oO0 : 'retro' , 'ico' : 'retro' , 'fan' : 'fanart_palantir' } )
 ii11Ii11i . append ( { 'title' : 'Pelis (Año)' , o0O0oO0 : 'anyo' , 'ico' : 'pelis_anyo' , 'fan' : 'fanart_palantir' } )
 ii11Ii11i . append ( { 'title' : 'Pelis A-Z' , o0O0oO0 : 'pelisByAZ' , 'ico' : 'pelis' , 'fan' : 'fanart_palantir' } )
 ii11Ii11i . append ( { 'title' : 'Sagas' , o0O0oO0 : 'sagas' , 'ico' : 'sagas' , 'fan' : 'fanart_palantir' } )
 ii11Ii11i . append ( { 'title' : 'Pelis Dibujos' , o0O0oO0 : 'peli_inf' , 'ico' : 'pelis_dibujos' , 'fan' : 'fanart_palantir' } )
 ii11Ii11i . append ( { 'title' : 'Pelis Dibujos Recientes' , o0O0oO0 : 'last_peli_inf' , 'ico' : 'dibujos_recientes' , 'fan' : 'fanart_palantir' } )
 ii11Ii11i . append ( { 'title' : 'Pelis Recientes' , o0O0oO0 : 'ultimas_pelis' , 'ico' : 'pelis_recientes' , 'fan' : 'fanart_palantir' } )
 ii11Ii11i . append ( { 'title' : 'Series Recientes' , o0O0oO0 : 'ultimas_series' , 'ico' : 'series_recientes' , 'fan' : 'fanart_palantir' } )
 ii11Ii11i . append ( { 'title' : 'Favoritos' , o0O0oO0 : 'listfav' , 'ico' : 'favoritos' , 'fan' : 'fanart_palantir' } )
 ii11Ii11i . append ( { 'title' : 'Buscar Peli' , o0O0oO0 : 'searchPeli' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
 ii11Ii11i . append ( { 'title' : 'Buscar Serie' , o0O0oO0 : 'searchSerie' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
 if 88 - 88: I1 % o00oO0oo0O0O0 * iiIIi1i1Iii + ii1I1ii1IiIi1 % I1IiI1III11i . OOO
 if 45 - 45: oooOoO / OOoOoO0o0o0OO - II + Ii . iiIIi1i1Iii
 return ii11Ii11i
 if 36 - 36: oooOoO
 if 56 - 56: oooOoO * oOO - ooOooO0OOO * OOoOoO0o0o0OO / iIi11 . i1iI1
def IioooIIiIIIIiiIiI ( ) :
 O0000O ( iiI )
 ii11Ii11i = Oo00oOO ( )
 IiiiIiiIII = [ ]
 for II1Ii1 in ii11Ii11i :
  ooOoO0O0 = iIiI1iiII1Ii ( nombre = II1Ii1 [ 'title' ] , caratula = '%s/%s.jpg' % ( iIi11iI1ii1I , II1Ii1 [ 'ico' ] ) ,
 poster = '%s/%s.jpg' % ( iIi11iI1ii1I , II1Ii1 [ 'fan' ] ) )
  ooIIII = '{0}?{1}={2}' . format ( o00I11Iii11i1Ii1 , o0O0oO0 , II1Ii1 [ o0O0oO0 ] )
  iIi11II11 = True
  IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , iIi11II11 ) )
 try :
  if 83 - 83: IIII * IIII
  xbmc . executebuiltin ( "Container.SetViewMode(500)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
 xbmcplugin . endOfDirectory ( iiII )
 if 10 - 10: ii1I1ii1IiIi1 * OOoOoO0o0o0OO + i1iI1 % ooOooO0OOO % OOoOoO0o0o0OO * ii1I1ii1IiIi1
 if 97 - 97: oOO % ii1I1ii1IiIi1 + IiII1IiI % i1iI1
 if 59 - 59: ooOooO0OOO
def Oo000ooO0OO ( rows = [ ] , type = o00 , carat = None , poste = None ) :
 try :
  if type == o00 :
   xbmcplugin . setContent ( iiII , "episodes" )
  else :
   xbmcplugin . setContent ( iiII , "movies" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except :
  pass
  if 22 - 22: IIII / oOO + Ii1I + oOO / IIII - I1IiI1III11i
 iii1iI = { }
 if 65 - 65: OOO / oo / oo % iiIIi1i1Iii
 if 4 - 4: iiIIi1i1Iii . IiII1IiI + Ii - OOO
 if 34 - 34: iIi11 + OOoOoO0o0o0OO + ii1I1ii1IiIi1 + oooOoO * ooOooO0OOO
 if 36 - 36: IIoooO0ooO0oo . oooOoO - i1iI1
 if 18 - 18: iIi11 / I1 / o00oO0oo0O0O0 . iIi11 . iIi11
 if 74 - 74: IIII * Ii * iiIIi1i1Iii - IIoooO0ooO0oo
 if 36 - 36: ooOooO0OOO % oooOoO . OOO
 if 41 - 41: iiIIi1i1Iii / I1IiI1III11i
 if 27 - 27: Ii % Ii - oOO - ooOooO0OOO
 iI1i1iIII1II = { }
 IiiiIiiIII = [ ]
 if len ( rows ) > 0 :
  for iIiIIiI1iIIIi in rows :
   Oo0oOOOO = [ ]
   O0O0oOOO0O00 = iIiIIiI1iIIIi [ 0 ]
   I1iiiII11 = iIiIIiI1iIIIi [ 1 ]
   o0Oo = iIiIIiI1iIIIi [ 2 ]
   i11Ii1I11 = iIiIIiI1iIIIi [ 6 ]
   if iIiIIiI1iIIIi [ 7 ] :
    IiiIiii1I = iIiIIiI1iIIIi [ 7 ]
   else :
    IiiIiii1I = None
   I11i1111 = iIiIIiI1iIIIi [ 8 ]
   oOoOO0Oo00o = iIiIIiI1iIIIi [ 9 ]
   ooOO0Oo0oO = iIiIIiI1iIIIi [ 10 ]
   O0oOooOoOo0 = iIiIIiI1iIIIi [ 11 ]
   oOO00OoO0oo = iIiIIiI1iIIIi [ 12 ]
   if I11i1111 :
    IiIiI = I11i1111
   else :
    IiIiI = str ( I1iiiII11 ) + 'x' + o0Oo
    I11i1111 = str ( I1iiiII11 ) + 'x' + o0Oo
   if iIiIIiI1iIIIi [ 3 ] == 'S' :
    I11i1111 = I11i1111 + '[COLOR green] (HD) [/COLOR]'
   if not O0oOooOoOo0 :
    O0oOooOoOo0 = carat
   if not oOO00OoO0oo :
    oOO00OoO0oo = poste
   ooOoO0O0 = iIiI1iiII1Ii ( nombre = I11i1111 , caratula = O0oOooOoOo0 ,
 poster = oOO00OoO0oo , video = { 'title' : I11i1111 , 'year' : oOoOO0Oo00o , 'plot' : ooOO0Oo0oO } , isPlayable = True )
   if 16 - 16: oOO . I1IiI1III11i % IIII % i1iI1
   if isinstance ( IiIiI , unicode ) :
    IiIiI = IiIiI . encode ( 'utf-8' )
   ooIIII = '{0}?{1}=play&id={2}&lin={3}&tit={4}&type={5}' . format ( o00I11Iii11i1Ii1 , o0O0oO0 , O0O0oOOO0O00 , i11Ii1I11 ,
 base64 . urlsafe_b64encode (
 unicode ( IiIiI , I111i11I1I ) . encode (
 I111i11I1I ) ) , type )
   try :
    OO0oOO0O , ooOoo0 = anor . I1i1I1iI11I (
 'select files.idFile, idPath, strFilename, playCount, iVideoWidth||"x"||iVideoHeight from files, streamdetails where streamdetails.idFile = files.idFile and iStreamType=0 and idPath=(Select idPath from path where strPath="plugin://plugin.video.palantir/") and strFilename like "plugin://plugin.video.palantir/?action=play&id=%s%"' % str (
 iIiIIiI1iIIIi [ 0 ] ) )
    if 95 - 95: IIII * ii1I1ii1IiIi1 / o00oO0oo0O0O0 % oOO - I1IiI1III11i . OOO
    for oOOiI1II in ooOoo0 :
     iii1iI [ oOOiI1II [ 2 ] ] = oOOiI1II
   except :
    pass
    if 7 - 7: oo / Ii - OOO
   if ooIIII in iii1iI :
    if iii1iI [ ooIIII ] [ 3 ] > 0 :
     Oo0oOOOO . append ( o0OO ( iii1iI [ ooIIII ] [ 0 ] , iii1iI [ ooIIII ] [ 1 ] , iii1iI [ ooIIII ] [ 2 ] , False ) )
    else :
     Oo0oOOOO . append ( o0OO ( iii1iI [ ooIIII ] [ 0 ] , iii1iI [ ooIIII ] [ 1 ] , iii1iI [ ooIIII ] [ 2 ] , True ) )
    if iii1iI [ ooIIII ] [ 4 ] :
     if not str ( O0O0oOOO0O00 ) + '-' + str ( I1iiiII11 ) + '-' + o0Oo in iI1i1iIII1II and not IiiIiii1I :
      iI1i1iIII1II [ str ( O0O0oOOO0O00 ) + '-' + str ( I1iiiII11 ) + '-' + o0Oo ] = str ( iii1iI [ ooIIII ] [ 4 ] )
   else :
    Oo0oOOOO . append ( o0OO ( 0 , oOOO0O0 , ooIIII , True ) )
    if 25 - 25: IIoooO0ooO0oo . oOO / ooOooO0OOO / IIII
   Oo0oOOOO . append (
 oOoOOo ( id = '%s-%s-%s' % ( str ( O0O0oOOO0O00 ) , str ( I1iiiII11 ) , o0Oo ) , type = type , nombre = I11i1111 , url = ooIIII ,
 caratula = O0oOooOoOo0 , poster = oOO00OoO0oo ) )
   if 95 - 95: oOO / II * ii1I1ii1IiIi1 - oo + IiII1IiI
   ooOoO0O0 . addContextMenuItems ( Oo0oOOOO )
   if 22 - 22: iiIIi1i1Iii
   if 87 - 87: OOO
   if 91 - 91: o00oO0oo0O0O0 + iiIIi1i1Iii - Ii - ii1I1ii1IiIi1 * I1IiI1III11i * ooOooO0OOO
   if 51 - 51: ii1I1ii1IiIi1 + IiII1IiI + oOO . I1 * OOoOoO0o0o0OO
   if 87 - 87: OOoOoO0o0o0OO * ooOooO0OOO % IIoooO0ooO0oo
   iIi11II11 = False
   IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , iIi11II11 ) )
  try :
   if len ( iI1i1iIII1II ) > 0 :
    for Ooo , OOo000OOoo00O in iI1i1iIII1II . iteritems ( ) :
     ithil . updateQuality ( iiI , Ooo , OOo000OOoo00O , type )
  except :
   pass
   if 67 - 67: OOoOoO0o0o0OO % ooOooO0OOO
 else :
  if 92 - 92: oOO + IiII1IiI - I1IiI1III11i % Ii1I * oo
  IiiiIiiIII . append ( ( '{0}' . format ( o00I11Iii11i1Ii1 ) , iIiI1iiII1Ii ( nombre = 'No hay elementos' , caratula = '' ) , True ) )
 xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
 xbmcplugin . endOfDirectory ( iiII )
 if 89 - 89: ooOooO0OOO
 if 85 - 85: ooOooO0OOO
 if 91 - 91: IiII1i1I * I1 + oo
def I11 ( rows , category = None , lang = None , date = None , params = { } ) :
 IiiiIiiIII = [ ]
 try :
  xbmcplugin . setContent ( iiII , "tvshows" )
  xbmc . executebuiltin ( "Container.SetViewMode(515)" )
 except :
  pass
  if 74 - 74: i1iI1 % IIII - IIII
  if 51 - 51: ii1I1ii1IiIi1 * ooOooO0OOO + ooOooO0OOO + oooOoO
 for iIiIIiI1iIIIi in rows :
  ii1Ii = iIiIIiI1iIIIi [ 0 ]
  II1I11 = iIiIIiI1iIIIi [ 1 ]
  I1IiiiIIIII1 = iIiIIiI1iIIIi [ 2 ]
  Ii11i1I1i1 = ''
  Oo0OoOo = ''
  oO0OooOO00 = ''
  if category and iIiIIiI1iIIIi [ 10 ] != 'General' and iIiIIiI1iIIIi [ 10 ] != 'Pelicula' :
   Oo0OoOo = '[COLOR silver](%s) [/COLOR]' % ( iIiIIiI1iIIIi [ 10 ] )
  if lang and iIiIIiI1iIIIi [ 9 ] != 'Castellano' :
   Ii11i1I1i1 = '[COLOR silver](%s) [/COLOR]' % ( iIiIIiI1iIIIi [ 9 ] )
  if date :
   oO0OooOO00 = '[COLOR silver](%s)[/COLOR]' % str ( iIiIIiI1iIIIi [ 11 ] )
  if I1IiiiIIIII1 and iIiIIiI1iIIIi [ 8 ] == 'N' :
   o0000O00ooo0o = ithil . ii11i ( I1IiiiIIIII1 )
   if o0000O00ooo0o == 'yt' :
    Ooooooo = ithil . i111 ( I1IiiiIIIII1 )
    for Oo in xrange ( 0 , len ( Ooooooo ) ) :
     if len ( Ooooooo ) <= 1 :
      Ii1iIi1Ii1 = ''
     else :
      Ii1iIi1Ii1 = " (" + str ( Oo + 1 ) + ")"
     OOO0OOooo0oOo = '[COLOR gold]%s [/COLOR] %s %s %s' % ( II1I11 + Ii1iIi1Ii1 , Ii11i1I1i1 , Oo0OoOo , oO0OooOO00 )
     ooOoO0O0 = iIiI1iiII1Ii ( nombre = OOO0OOooo0oOo , caratula = iIiIIiI1iIIIi [ 6 ] ,
 poster = iIiIIiI1iIIIi [ 7 ] , video = { 'title' : iIiIIiI1iIIIi [ 3 ] , 'year' : iIiIIiI1iIIIi [ 4 ] , 'plot' : iIiIIiI1iIIIi [ 5 ] } )
     ooOoO0O0 . addContextMenuItems ( [ oOoOOo ( id = '%s-v' % str ( ii1Ii ) , type = 'series' , nombre = OOO0OOooo0oOo , url = Ooooooo [ Oo ] ,
 caratula = iIiIIiI1iIIIi [ 6 ] , poster = iIiIIiI1iIIIi [ 7 ] ) ] )
     IiiiIiiIII . append ( ( Ooooooo [ Oo ] , ooOoO0O0 , True ) )
   else :
    OOO0OOooo0oOo = '[COLOR gold]%s [/COLOR] %s %s %s' % ( II1I11 , Ii11i1I1i1 , Oo0OoOo , oO0OooOO00 )
    ooOoO0O0 = iIiI1iiII1Ii ( nombre = OOO0OOooo0oOo , caratula = iIiIIiI1iIIIi [ 6 ] ,
 poster = iIiIIiI1iIIIi [ 7 ] , video = { 'title' : iIiIIiI1iIIIi [ 3 ] , 'year' : iIiIIiI1iIIIi [ 4 ] , 'plot' : iIiIIiI1iIIIi [ 5 ] } )
    ooIIII = '{0}?{1}=view_serie&serie_id={2}' . format ( o00I11Iii11i1Ii1 , o0O0oO0 , ii1Ii )
    ooOoO0O0 . addContextMenuItems (
 [ oOoOOo ( id = '%s-v' % str ( ii1Ii ) , type = 'series' , nombre = OOO0OOooo0oOo , url = ooIIII , caratula = iIiIIiI1iIIIi [ 6 ] , poster = iIiIIiI1iIIIi [ 7 ] ) ] )
    IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , True ) )
  else :
   OOO0OOooo0oOo = '[COLOR gold]%s [/COLOR] %s %s %s' % ( II1I11 , Ii11i1I1i1 , Oo0OoOo , oO0OooOO00 )
   ooOoO0O0 = iIiI1iiII1Ii ( nombre = OOO0OOooo0oOo , caratula = iIiIIiI1iIIIi [ 6 ] ,
 poster = iIiIIiI1iIIIi [ 7 ] , video = { 'title' : iIiIIiI1iIIIi [ 3 ] , 'year' : iIiIIiI1iIIIi [ 4 ] , 'plot' : iIiIIiI1iIIIi [ 5 ] } )
   ooIIII = '{0}?{1}=serie&serie_id={2}' . format ( o00I11Iii11i1Ii1 , o0O0oO0 , ii1Ii )
   ooOoO0O0 . addContextMenuItems (
 [ oOoOOo ( id = str ( ii1Ii ) , type = 'series' , nombre = OOO0OOooo0oOo , url = ooIIII , caratula = iIiIIiI1iIIIi [ 6 ] , poster = iIiIIiI1iIIIi [ 7 ] ) ] )
   IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , True ) )
   if 76 - 76: oooOoO . oo + IIoooO0ooO0oo
 if len ( rows ) >= iIiiIIi1III1 :
  if 'c_page' in params and 'action' in params :
   try :
    II1I11 = II1I11 . encode ( 'utf-8' , 'ignore' )
   except ( UnicodeEncodeError , UnicodeDecodeError ) :
    pass
   OoOoO0O0OOo00 = int ( params [ 'c_page' ] )
   OoOoO0O0OOo00 = OoOoO0O0OOo00 + 1
   ooOoO0O0 = iIiI1iiII1Ii ( nombre = 'Página Siguiente (%s) >' % str ( OoOoO0O0OOo00 ) )
   ooIIII = '{0}?{1}={2}&c_page={3}&alfa={4}&page={5}' . format ( o00I11Iii11i1Ii1 , o0O0oO0 , params [ 'action' ] , str ( OoOoO0O0OOo00 ) ,
 base64 . urlsafe_b64encode (
 "alfa >= '" + rows [ len ( rows ) - 1 ] [ 12 ] + "'" ) ,
 base64 . urlsafe_b64encode (
 "nombre > '" + II1I11 + "'" ) )
   IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , True ) )
 xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
 xbmcplugin . endOfDirectory ( iiII )
 if 98 - 98: IiII1i1I . IIII / I1IiI1III11i
 if 53 - 53: IiII1i1I + IIII / II - I1IiI1III11i % ii1I1ii1IiIi1
 if 22 - 22: IIII * ii1I1ii1IiIi1 / o00oO0oo0O0O0 - II
def oO00O0Oo ( serie_id ) :
 iiIiii1 = sqlite3 . connect ( iiI )
 Oo0ooO00 = iiIiii1 . cursor ( )
 Oo0ooO00 . execute (
 "SELECT series.serie_id, series_temp.temp_id, series_temp.link, series.nombre, series.anno, series.sinopsis, series.caratula, series.poster, series_temp.sinopsis, series_temp.caratula, series_temp.poster, series_temp.has_episodes, series_temp.nombre, series.link, series.quality, series_temp.quality FROM series LEFT JOIN series_temp ON series.serie_id = series_temp.serie_id where series.serie_id=? ORDER BY series_temp.temp_id" ,
 ( serie_id , ) )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 iiIiii1 . close ( )
 IiiiIiiIII = [ ]
 IiI1iI = False
 if len ( Ii1iI1i1iI1iI ) > 0 :
  if Ii1iI1i1iI1iI [ 0 ] [ 13 ] :
   o0000O00ooo0o = ithil . ii11i ( Ii1iI1i1iI1iI [ 0 ] [ 13 ] )
   if o0000O00ooo0o == 'yt' :
    Ooooooo = ithil . i111 ( Ii1iI1i1iI1iI [ 0 ] [ 13 ] )
    for Oo in xrange ( 0 , len ( Ooooooo ) ) :
     if len ( Ooooooo ) <= 1 :
      Ii1iIi1Ii1 = ''
     else :
      Ii1iIi1Ii1 = " (" + str ( Oo + 1 ) + ")"
     OOO0OOooo0oOo = '[COLOR gold]Lista de Capítulos %s [/COLOR]' % Ii1iIi1Ii1
     ooOoO0O0 = iIiI1iiII1Ii ( nombre = OOO0OOooo0oOo , caratula = Ii1iI1i1iI1iI [ 0 ] [ 6 ] ,
 poster = Ii1iI1i1iI1iI [ 0 ] [ 7 ] ,
 video = { 'title' : Ii1iI1i1iI1iI [ 0 ] [ 3 ] , 'year' : Ii1iI1i1iI1iI [ 0 ] [ 4 ] , 'plot' : Ii1iI1i1iI1iI [ 0 ] [ 5 ] } )
     ooOoO0O0 . addContextMenuItems ( [ oOoOOo ( id = '%s-v' % str ( serie_id ) , type = o00 , nombre = OOO0OOooo0oOo ,
 url = Ooooooo [ Oo ] , caratula = Ii1iI1i1iI1iI [ 0 ] [ 6 ] ,
 poster = Ii1iI1i1iI1iI [ 0 ] [ 7 ] ) ] )
     IiiiIiiIII . append ( ( Ooooooo [ Oo ] , ooOoO0O0 , True ) )
   else :
    OOO0OOooo0oOo = '[COLOR gold]Lista de Capítulos [/COLOR]'
    ooOoO0O0 = iIiI1iiII1Ii ( nombre = OOO0OOooo0oOo , caratula = Ii1iI1i1iI1iI [ 0 ] [ 6 ] ,
 poster = Ii1iI1i1iI1iI [ 0 ] [ 7 ] ,
 video = { 'title' : Ii1iI1i1iI1iI [ 0 ] [ 3 ] , 'year' : Ii1iI1i1iI1iI [ 0 ] [ 4 ] ,
 'plot' : 'Todos los episodios de la serie' } )
    ooIIII = '{0}?{1}=view_serie&serie_id={2}' . format ( o00I11Iii11i1Ii1 , o0O0oO0 , serie_id )
    ooOoO0O0 . addContextMenuItems ( [ oOoOOo ( id = '%s-v' % str ( serie_id ) , type = o00 , nombre = OOO0OOooo0oOo , url = ooIIII ,
 caratula = Ii1iI1i1iI1iI [ 0 ] [ 6 ] , poster = Ii1iI1i1iI1iI [ 0 ] [ 7 ] ) ] )
    if 45 - 45: Ii - iiIIi1i1Iii . oOO . IiII1IiI / oooOoO * iiIIi1i1Iii
    if 42 - 42: oOO % I1
    if 70 - 70: I1 / IiII1i1I * Ii1I
    IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , True ) )
 for iIiIIiI1iIIIi in Ii1iI1i1iI1iI :
  IiI1iI = False
  ii1Ii = iIiIIiI1iIIIi [ 0 ]
  OO0O0O0O0Oo0 = iIiIIiI1iIIIi [ 1 ]
  if 100 - 100: oo * IiII1IiI % I1 + OOO . o00oO0oo0O0O0
  if iIiIIiI1iIIIi [ 12 ] :
   O0OoOO = iIiIIiI1iIIIi [ 12 ]
  else :
   O0OoOO = '%s %s' % ( 'Temporada' , OO0O0O0O0Oo0 )
  O0 = I1iii1 ( iIiIIiI1iIIIi [ 5 ] , iIiIIiI1iIIIi [ 6 ] , iIiIIiI1iIIIi [ 7 ] , iIiIIiI1iIIIi [ 8 ] , iIiIIiI1iIIIi [ 9 ] , iIiIIiI1iIIIi [ 10 ] )
  if iIiIIiI1iIIIi [ 2 ] :
   iIi11II11 = True
   IiI1iI = True
   o0000O00ooo0o = ithil . ii11i ( iIiIIiI1iIIIi [ 2 ] )
   if o0000O00ooo0o == 'yt' :
    Ooooooo = ithil . i111 ( iIiIIiI1iIIIi [ 2 ] )
    for Oo in xrange ( 0 , len ( Ooooooo ) ) :
     if len ( Ooooooo ) <= 1 :
      Ii1iIi1Ii1 = ''
     else :
      Ii1iIi1Ii1 = " (" + str ( Oo + 1 ) + ")"
     OOO0OOooo0oOo = '[COLOR gold]%s[/COLOR]' % ( O0OoOO + Ii1iIi1Ii1 )
     ooOoO0O0 = iIiI1iiII1Ii ( nombre = OOO0OOooo0oOo , caratula = O0 [ 1 ] ,
 poster = O0 [ 2 ] ,
 video = { 'title' : iIiIIiI1iIIIi [ 3 ] , 'year' : iIiIIiI1iIIIi [ 4 ] , 'plot' : O0 [ 0 ] } )
     ooOoO0O0 . addContextMenuItems ( [ oOoOOo ( id = '%s%s-v' % ( str ( ii1Ii ) , str ( OO0O0O0O0Oo0 ) ) , type = o00 , nombre = OOO0OOooo0oOo ,
 url = Ooooooo [ Oo ] , caratula = O0 [ 1 ] , poster = O0 [ 2 ] ) ] )
     IiiiIiiIII . append ( ( Ooooooo [ Oo ] , ooOoO0O0 , True ) )
   else :
    OOO0OOooo0oOo = '[COLOR gold]%s[/COLOR]' % O0OoOO
    ooOoO0O0 = iIiI1iiII1Ii ( nombre = OOO0OOooo0oOo , caratula = O0 [ 1 ] ,
 poster = O0 [ 2 ] ,
 video = { 'title' : iIiIIiI1iIIIi [ 3 ] , 'year' : iIiIIiI1iIIIi [ 4 ] , 'plot' : O0 [ 0 ] } )
    ooIIII = '{0}?{1}=view_temp&serie_id={2}&temp_id={3}' . format ( o00I11Iii11i1Ii1 , o0O0oO0 , ii1Ii , OO0O0O0O0Oo0 )
    ooOoO0O0 . addContextMenuItems ( [ oOoOOo ( id = '%s%s-v' % ( str ( ii1Ii ) , str ( OO0O0O0O0Oo0 ) ) , type = o00 , nombre = OOO0OOooo0oOo ,
 url = ooIIII , caratula = O0 [ 1 ] , poster = O0 [ 2 ] ) ] )
    if 36 - 36: ii1I1ii1IiIi1 / IiII1IiI
    if 47 - 47: OOoOoO0o0o0OO - IiII1i1I . Ii - OOoOoO0o0o0OO . IIoooO0ooO0oo + IIII
    if 35 - 35: Ii * IIoooO0ooO0oo % oooOoO . oooOoO
    IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , iIi11II11 ) )
  if iIiIIiI1iIIIi [ 11 ] == 'Y' :
   OOO0OOooo0oOo = '[COLOR gold]%s [/COLOR]' % O0OoOO
   if iIiIIiI1iIIIi [ 2 ] :
    OOO0OOooo0oOo = '%s [COLOR white](Alternativo)[/COLOR]' % ( OOO0OOooo0oOo )
   ooOoO0O0 = iIiI1iiII1Ii ( nombre = OOO0OOooo0oOo , caratula = O0 [ 1 ] ,
 poster = O0 [ 2 ] ,
 video = { 'title' : iIiIIiI1iIIIi [ 3 ] , 'year' : iIiIIiI1iIIIi [ 4 ] , 'plot' : O0 [ 0 ] } )
   ooIIII = '{0}?{1}=list_temp&serie_id={2}&temp_id={3}&caratula={4}&poster={5}' . format ( o00I11Iii11i1Ii1 , o0O0oO0 , ii1Ii , OO0O0O0O0Oo0 ,
 O0 [ 1 ] , O0 [ 2 ] )
   ooOoO0O0 . addContextMenuItems ( [ oOoOOo ( id = '%s%s' % ( str ( ii1Ii ) , str ( OO0O0O0O0Oo0 ) ) , type = o00 , nombre = OOO0OOooo0oOo , url = ooIIII ,
 caratula = O0 [ 1 ] , poster = O0 [ 2 ] ) ] )
   if 30 - 30: IIII . IiII1i1I * IIII - Ii1I / OOoOoO0o0o0OO * iIi11
   if 30 - 30: oooOoO
   if 75 - 75: OOoOoO0o0o0OO % oooOoO . oOO
   if 13 - 13: ii1I1ii1IiIi1 + iIi11 % oo
   iIi11II11 = True
   IiI1iI = True
   IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , iIi11II11 ) )
 try :
  xbmcplugin . setContent ( iiII , "tvshows" )
  xbmc . executebuiltin ( "Container.SetViewMode(515)" )
 except :
  pass
 if IiI1iI :
  xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
  xbmcplugin . endOfDirectory ( iiII )
 else :
  xbmc . log ( "[addon.Palantir-%s]: No info found for serie %s " % ( iiIIiiiI11 , serie_id ) )
  if 14 - 14: iIi11 + OOoOoO0o0o0OO - oo - o00oO0oo0O0O0
  if 77 - 77: iIi11 % IIoooO0ooO0oo * I1IiI1III11i * IIII - II - OOoOoO0o0o0OO
  if 96 - 96: o00oO0oo0O0O0 / oOO * oooOoO - Ii
def III1111i11II ( serie_id , temp_id , caratula , poster ) :
 Ii1iI1i1iI1iI = IiI11IiI1iI11 ( "capitulos" , [ "serie_id" , "temp_id" , "capitulo_id" , "''" , "''" , "''" , "link" , "quality" ,
 "nombre" , "anno" , "sinopsis" , "caratula" , "poster" ] , [ "serie_id" , "temp_id" ] ,
 [ serie_id , temp_id ] , [ 'capitulos.nombre' , 'capitulos.capitulo_id' ] )
 Oo000ooO0OO ( Ii1iI1i1iI1iI , o00 , caratula , poster )
 if 24 - 24: II . Ii1I
 if 7 - 7: IiII1i1I / oo
 if 6 - 6: I1 / OOoOoO0o0o0OO % I1IiI1III11i / oo
def oO0o ( serie_id , temp_id ) :
 iiIiii1 = sqlite3 . connect ( iiI )
 Oo0ooO00 = iiIiii1 . cursor ( )
 Oo0ooO00 . execute (
 "SELECT series.serie_id, series_temp.temp_id, '', '', '', '', series_temp.link, series_temp.quality, series.nombre, series_temp.anno, series.sinopsis, series.caratula, series.poster, series_temp.sinopsis, series_temp.caratula, series_temp.poster FROM series INNER JOIN series_temp ON series.serie_id=series_temp.serie_id where series_temp.serie_id=? AND series_temp.temp_id=?" ,
 ( serie_id , temp_id , ) )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 iiIiii1 . close ( )
 O0 = I1iii1 ( Ii1iI1i1iI1iI [ 0 ] [ 10 ] , Ii1iI1i1iI1iI [ 0 ] [ 11 ] , Ii1iI1i1iI1iI [ 0 ] [ 12 ] , Ii1iI1i1iI1iI [ 0 ] [ 13 ] , Ii1iI1i1iI1iI [ 0 ] [ 14 ] , Ii1iI1i1iI1iI [ 0 ] [ 15 ] )
 iI = ithil . iiiI ( Ii1iI1i1iI1iI [ 0 ] [ 6 ] , iiI , serie_id , temp_id )
 IiI11Ii1ii11 = [ None ] * len ( iI )
 for Oo in xrange ( 0 , len ( iI ) ) :
  IiI11Ii1ii11 [ Oo ] = list ( Ii1iI1i1iI1iI [ 0 ] [ : len ( Ii1iI1i1iI1iI [ 0 ] ) - 3 ] )
  IiI11Ii1ii11 [ Oo ] [ 10 ] = O0 [ 0 ]
  IiI11Ii1ii11 [ Oo ] [ 11 ] = O0 [ 1 ]
  IiI11Ii1ii11 [ Oo ] [ 12 ] = O0 [ 2 ]
  IiI11Ii1ii11 [ Oo ] [ 6 ] = iI [ Oo ] [ 1 ]
  IiI11Ii1ii11 [ Oo ] [ 8 ] = iI [ Oo ] [ 0 ]
  IiI11Ii1ii11 [ Oo ] [ 10 ] = ''
 Oo000ooO0OO ( IiI11Ii1ii11 , o00 )
 if 46 - 46: iIi11 - Ii1I / o00oO0oo0O0O0
 if 35 - 35: OOO % IiII1i1I - Ii1I . oo + IiII1i1I
 if 28 - 28: oOO * Ii * OOoOoO0o0o0OO + oo . iiIIi1i1Iii
def i111IiIIiII1 ( serie_id ) :
 Ii1iI1i1iI1iI = IiI11IiI1iI11 ( "series" ,
 [ "serie_id" , "''" , "''" , "''" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster"
 ] , [ "serie_id" ] , [ serie_id ] , [ 'serie_id' ] )
 if 35 - 35: IiII1i1I % i1iI1 / ooOooO0OOO
 if 13 - 13: ooOooO0OOO
 iI = ithil . iiiI ( Ii1iI1i1iI1iI [ 0 ] [ 6 ] , iiI , serie_id )
 IiI11Ii1ii11 = [ None ] * len ( iI )
 for Oo in xrange ( 0 , len ( iI ) ) :
  IiI11Ii1ii11 [ Oo ] = list ( Ii1iI1i1iI1iI [ 0 ] [ : ] )
  IiI11Ii1ii11 [ Oo ] [ 6 ] = iI [ Oo ] [ 1 ]
  IiI11Ii1ii11 [ Oo ] [ 8 ] = iI [ Oo ] [ 0 ]
  IiI11Ii1ii11 [ Oo ] [ 10 ] = ''
 Oo000ooO0OO ( IiI11Ii1ii11 , o00 )
 if 71 - 71: IiII1i1I + iIi11 % IiII1i1I % IIII / OOO
 if 17 - 17: iIi11
 if 63 - 63: i1iI1
def OoOoOOOooOoO ( ) :
 iiIiii1 = sqlite3 . connect ( iiI )
 Oo0ooO00 = iiIiii1 . cursor ( )
 Oo0ooO00 . execute ( "Select anno,count(peli_id) from pelis group by anno order by anno desc" )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 iiIiii1 . close ( )
 IiiiIiiIII = [ ]
 for iIiIIiI1iIIIi in Ii1iI1i1iI1iI :
  I1I11i = iIiIIiI1iIIIi [ 0 ]
  IiiI = iIiIIiI1iIIIi [ 1 ]
  OOO0OOooo0oOo = '[COLOR gold]%s[/COLOR] (%s)' % ( I1I11i , IiiI )
  ooOoO0O0 = xbmcgui . ListItem ( label = OOO0OOooo0oOo , iconImage = '' )
  ooIIII = '{0}?action=anyo_detail&anno={1}' . format ( o00I11Iii11i1Ii1 , I1I11i )
  iIi11II11 = True
  IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , iIi11II11 ) )
 try :
  xbmcplugin . setContent ( iiII , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
 xbmcplugin . endOfDirectory ( iiII )
 if 67 - 67: II / OOO % Ii1I / oOO . i1iI1 + IIII
 if 17 - 17: oo / iIi11 - Ii / I1IiI1III11i * oo - I1
def iiIIiIIIi ( ) :
 iiIiii1 = sqlite3 . connect ( iiI )
 Oo0ooO00 = iiIiii1 . cursor ( )
 Oo0ooO00 . execute ( "Select saga from pelis group by saga having saga not null order by saga" )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 iiIiii1 . close ( )
 IiiiIiiIII = [ ]
 for iIiIIiI1iIIIi in Ii1iI1i1iI1iI :
  Ooooo0o0oo0O = iIiIIiI1iIIIi [ 0 ]
  try :
   Ooooo0o0oo0O = Ooooo0o0oo0O . encode ( 'utf-8' , 'ignore' )
  except ( UnicodeEncodeError , UnicodeDecodeError ) :
   pass
  OOO0OOooo0oOo = '[COLOR gold]%s[/COLOR]' % Ooooo0o0oo0O
  ooOoO0O0 = xbmcgui . ListItem ( label = OOO0OOooo0oOo , iconImage = '' )
  ooIIII = '{0}?action=saga_detail&saga={1}' . format ( o00I11Iii11i1Ii1 , base64 . urlsafe_b64encode ( Ooooo0o0oo0O ) )
  iIi11II11 = True
  IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , iIi11II11 ) )
 try :
  xbmcplugin . setContent ( iiII , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
 xbmcplugin . endOfDirectory ( iiII )
 if 4 - 4: I1
 if 77 - 77: OOO / iiIIi1i1Iii
def IiII1iII ( saga , params ) :
 Ii1iI1i1iI1iI = IiI11IiI1iI11 ( "pelis" ,
 [ "peli_id" , "''" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster"
 ] , [ "saga" ] , [ base64 . urlsafe_b64decode ( saga ) . decode ( 'utf-8' ) ] , [ 'nombre' ] )
 Oo000ooO0OO ( Ii1iI1i1iI1iI , 'pelis' )
 if 61 - 61: I1IiI1III11i / OOO / I1IiI1III11i
def II1Iii111i1I1 ( anno , params ) :
 Ii1iI1i1iI1iI = IiI11IiI1iI11 ( "pelis" ,
 [ "peli_id" , "''" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster"
 ] , [ "anno" ] , [ anno ] , [ 'nombre' ] )
 Oo000ooO0OO ( Ii1iI1i1iI1iI , 'pelis' )
 if 46 - 46: ooOooO0OOO + iiIIi1i1Iii
def I1II1iII1I1 ( category , order , params = '' ) :
 Ii1iI1i1iI1iI = IiI11IiI1iI11 ( "pelis" ,
 [ "peli_id" , "''" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster"
 ] , [ "category" ] , category , order , params )
 Oo000ooO0OO ( Ii1iI1i1iI1iI , 'pelis' )
 if 15 - 15: IIoooO0ooO0oo % iiIIi1i1Iii % IiII1IiI
def IiI11IiI1iI11 ( table , values , ids , ids_value , order , params = '' ) :
 iii1i11i1 = sqlite3 . connect ( iiI )
 Oo0ooO00 = iii1i11i1 . cursor ( )
 Oo0ooO00 . execute ( "SELECT " + "," . join ( values ) + "," + "," . join ( ids ) + " FROM " + table + " WHERE " + (
 " = ? and " . join ( ids ) + "=?" ) + "order by " + "," . join ( order ) + params , ids_value )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 iii1i11i1 . close ( )
 return Ii1iI1i1iI1iI
 if 52 - 52: IIII % IIII + ii1I1ii1IiIi1 * IiII1IiI % iiIIi1i1Iii
 if 48 - 48: o00oO0oo0O0O0 + i1iI1 / oOO / II % IiII1i1I
def OOoooo0o0O ( lin , tit , id , type ) :
 ithil . IiiI1I1I1iIiI ( lin , tit , iiI , id , type )
 if 50 - 50: Ii
 if 97 - 97: OOoOoO0o0o0OO
def iii1II ( paramstring ) :
 IIII1I1IIIiI = dict ( parse_qsl ( paramstring ) )
 if IIII1I1IIIiI :
  if IIII1I1IIIiI [ o0O0oO0 ] == o00 :
   IIIIoo ( '==' , 'general' , IIII1I1IIIiI )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'seriesInf' :
   IIIIoo ( '==' , 'infantil' , IIII1I1IIIiI )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'retro' :
   IIIIoo ( '==' , 'retro' , IIII1I1IIIiI )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'searchSerie' :
   iiIIiIi11II1 ( o0O0o , 'series' )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'searchPeli' :
   iiIIiIi11II1 ( I1I1i , 'pelis' )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'seriesByLang' :
   if 'lang' in IIII1I1IIIiI :
    IIiI11 ( IIII1I1IIIiI [ 'lang' ] )
   else :
    IIiI11 ( )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'seriesByAZ' :
   if 'letra' in IIII1I1IIIiI :
    I1111Ii1I ( IIII1I1IIIiI [ 'letra' ] , 'serie' )
   else :
    I1111Ii1I ( type = 'serie' )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'masvisto' :
   OooO0OOo0 ( )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'ultimas_series' :
   o0Oo0oo00 ( o0O0o , 'series' )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'ultimas_pelis' :
   I1II1iII1I1 ( [ 'Pelicula' ] , [ 'updated desc' , 'anno desc' ] , ' limit 200' )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'serie' :
   oO00O0Oo ( IIII1I1IIIiI [ 'serie_id' ] )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'addfav' :
   xbmc . log ( 'Params %s' % IIII1I1IIIiI )
   I11IIii1I ( IIII1I1IIIiI )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'rmfav' :
   iii1iIII1111I ( IIII1I1IIIiI )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'listfav' :
   O0O00O0O ( )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'to_unwatch' :
   IiI ( IIII1I1IIIiI [ 'idFile' ] , IIII1I1IIIiI [ 'idPath' ] , IIII1I1IIIiI [ 'fileName' ] , False )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'to_watch' :
   IiI ( IIII1I1IIIiI [ 'idFile' ] , IIII1I1IIIiI [ 'idPath' ] , IIII1I1IIIiI [ 'fileName' ] , True )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'view_serie' :
   i111IiIIiII1 ( IIII1I1IIIiI [ 'serie_id' ] )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'view_temp' :
   oO0o ( IIII1I1IIIiI [ 'serie_id' ] , IIII1I1IIIiI [ 'temp_id' ] )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'list_temp' :
   III1111i11II ( IIII1I1IIIiI [ 'serie_id' ] , IIII1I1IIIiI [ 'temp_id' ] , IIII1I1IIIiI [ 'caratula' ] , IIII1I1IIIiI [ 'poster' ] )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'play' :
   OOoooo0o0O ( IIII1I1IIIiI [ 'lin' ] , IIII1I1IIIiI [ 'tit' ] , IIII1I1IIIiI [ 'id' ] , IIII1I1IIIiI [ 'type' ] )
  elif IIII1I1IIIiI [ 'action' ] == 'anyo' :
   OoOoOOOooOoO ( )
  elif IIII1I1IIIiI [ 'action' ] == 'anyo_detail' :
   II1Iii111i1I1 ( IIII1I1IIIiI [ 'anno' ] , IIII1I1IIIiI )
  elif IIII1I1IIIiI [ 'action' ] == 'sagas' :
   iiIIiIIIi ( )
  elif IIII1I1IIIiI [ 'action' ] == 'saga_detail' :
   IiII1iII ( IIII1I1IIIiI [ 'saga' ] , IIII1I1IIIiI )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'peli_inf' :
   I1II1iII1I1 ( [ 'Dibujos' ] , [ 'nombre' ] )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'pelisByAZ' :
   if 'letra' in IIII1I1IIIiI :
    I1111Ii1I ( IIII1I1IIIiI [ 'letra' ] , 'peli' )
   else :
    I1111Ii1I ( type = 'peli' )
  elif IIII1I1IIIiI [ o0O0oO0 ] == 'last_peli_inf' :
   I1II1iII1I1 ( [ 'Dibujos' ] , [ 'updated desc' , 'anno desc' ] , ' limit 200' )
 else :
  IioooIIiIIIIiiIiI ( )
  if 39 - 39: ii1I1ii1IiIi1 + iIi11 . OOO % IIII - I1
  if 80 - 80: Ii . OOO
if __name__ == '__main__' :
 iii1II ( sys . argv [ 2 ] [ 1 : ] )
 if 38 - 38: oooOoO / I1 * IIoooO0ooO0oo
 if 85 - 85: I1 - IIoooO0ooO0oo - oo * OOoOoO0o0o0OO / I1
 if 79 - 79: iiIIi1i1Iii * iiIIi1i1Iii % IiII1i1I / iiIIi1i1Iii + I1 . IiII1i1I
 if 55 - 55: OOoOoO0o0o0OO
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')