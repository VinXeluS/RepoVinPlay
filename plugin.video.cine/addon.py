import base64;exec base64.b64decode('IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KaW1wb3J0IHN5cyAsIG9zICwgcmUgLCB1bmljb2RlZGF0YQppbXBvcnQgeGJtY2d1aQppbXBvcnQgeGJtY3BsdWdpbgppbXBvcnQgeGJtY2FkZG9uCmltcG9ydCB1cmxsaWIgLCB1cmxsaWIyCmltcG9ydCB1cmxwYXJzZQpmcm9tIHVybHBhcnNlIGltcG9ydCBwYXJzZV9xc2wKaW1wb3J0IHNxbGl0ZTMgLCBiYXNlNjQgLCB6bGliCmlmIDY0IC0gNjQ6IGkxMWlJaWlJaWkKZGVmIE9PMG8gKCBzICkgOgogcmV0dXJuICcnIC4gam9pbiAoICggYyBmb3IgYyBpbiB1bmljb2RlZGF0YSAuIG5vcm1hbGl6ZSAoICdORkQnICwgcyApIGlmIHVuaWNvZGVkYXRhIC4gY2F0ZWdvcnkgKCBjICkgIT0gJ01uJyApICkKIGlmIDgxIC0gODE6IElpaTFJMSArIE9PME8wTyAlIGlpaWlpICUgaWkxSSAtIG9vTzBPTzAwMG8KZGVmIGlpMTFpICggKSA6CiBpbXBvcnQgeGJtYwogb09vb09vTzBPbzBPID0geGJtYyAuIEtleWJvYXJkICggIiIgKQogb09vb09vTzBPbzBPIC4gZG9Nb2RhbCAoICkKIGlJMSA9ICcnCiBpZiAoIG9Pb29Pb08wT28wTyAuIGlzQ29uZmlybWVkICggKSApIDoKICBpSTEgPSBvT29vT29PME9vME8gLiBnZXRUZXh0ICggKQogcmV0dXJuIGlJMQogaWYgNDMgLSA0MzogSTExaTExSWkKb08wMG9PbyA9IHhibWNhZGRvbiAuIEFkZG9uICggKQpPT09vMCA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggb08wMG9PbyAuIGdldEFkZG9uSW5mbyAoICdwYXRoJyApIC4gZGVjb2RlICggJ3V0Zi04JyApICkKT29vbzAwMG8gPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIG9PMDBvT28gLiBnZXRBZGRvbkluZm8gKCAncHJvZmlsZScgKSAuIGRlY29kZSAoICd1dGYtOCcgKSApCklpSWkxMWlJSWkxSWkgPSBvcyAuIHBhdGggLiBqb2luICggT09PbzAgLCAicmVzb3VyY2VzL21lZGlhLyIgKQpPbzBPID0gJyVzL3RoZWJhcy50bXAnICUgT29vbzAwMG8KSWlJID0gJyVzL3Jrb2Jhcy50bXAnICUgT29vbzAwMG8KaWYgbm90IG9zIC4gcGF0aCAuIGV4aXN0cyAoIE9vb28wMDBvICkgOgogdHJ5IDoKICBvcyAuIG1ha2VkaXJzICggT29vbzAwMG8gKQogZXhjZXB0IDogcGFzcwpvb09vID0gdXJscGFyc2UgLiBwYXJzZV9xcyAoIHN5cyAuIGFyZ3YgWyAyIF0gWyAxIDogXSApCk9vID0gc3lzIC4gYXJndiBbIDAgXQpvME8gPSBpbnQgKCBzeXMgLiBhcmd2IFsgMSBdICkKSWlpSUlJMTExaUkgPSBiYXNlNjQgLiBiNjRkZWNvZGUgKCAnYUhSMGNEb3ZMM2QzZHk1aFpHUnZibU5wYm1VdVkyeHZkV1F2JyApCmlmIDM0IC0gMzQ6IGlpaTFJMUkgLyBPMDBvT29Pb08wbzBPIC4gTzBvbzBPTzAgKyBPbzBvb08wb28wb08gLiBJMWkxaUkxaSAtIElJCmRlZiBPb0kxSWkxMUkxSWkxaSAoICkgOgogT29vID0gWyBdCiBPb28gLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnR8OpbmVyb3MnICwgJ2FjdGlvbicgOiAnZ2VuZXJvJyAsICdpY28nIDogJ2dlbicgfSApCiBPb28gLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnVGVtYXMnICwgJ2FjdGlvbicgOiAndGVtYScgLCAnaWNvJyA6ICd0ZW0nIH0gKQogT29vIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0HDsW9zJyAsICdhY3Rpb24nIDogJ2Fubm8nICwgJ2ljbycgOiAnYW5uJyB9ICkKIE9vbyAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdHcnVwb3MnICwgJ2FjdGlvbicgOiAnZ3J1cG8nICwgJ2ljbycgOiAnZ3J1JyB9ICkKIE9vbyAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdQYcOtc2VzJyAsICdhY3Rpb24nIDogJ3BhaXMnICwgJ2ljbycgOiAnZ3J1JyB9ICkKIE9vbyAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdCdXNjYXIgcG9yIHTDrXR1bG8nICwgJ2FjdGlvbicgOiAnYnVzdGl0JyAsICdpY28nIDogJ2J1cycgfSApCiBPb28gLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnQnVzY2FyIHBvciBkaXJlY3RvcicgLCAnYWN0aW9uJyA6ICdidXNkaXInICwgJ2ljbycgOiAnYnVzJyB9ICkKIE9vbyAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdCdXNjYXIgcG9yIGFjdG9yJyAsICdhY3Rpb24nIDogJ2J1c2FjdCcgLCAnaWNvJyA6ICdidXMnIH0gKQogT29vIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0J1c2NhciBwb3IgZ3J1cG8nICwgJ2FjdGlvbicgOiAnYnVzZ3J1JyAsICdpY28nIDogJ2J1cycgfSApCiBPb28gLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnVmVyIHBlbGkgcmVjb21lbmRhZGEnICwgJ2FjdGlvbicgOiAncGVscmVjJyAsICdpY28nIDogJ2J1cycgfSApCiBPb28gLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnw5psdGltYXMgMjAxNi0yMDE3JyAsICdhY3Rpb24nIDogJ3VsdGltJyAsICdpY28nIDogJ2J1cycgfSApCiBPb28gLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnw5psdGltYXMgaGFzdGEgMjAxNScgLCAnYWN0aW9uJyA6ICd1bHRpbTInICwgJ2ljbycgOiAnYnVzJyB9ICkKIE9vbyAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICfDmmx0aW1hcyAxMDAgSEQnICwgJ2FjdGlvbicgOiAndWx0aGQnICwgJ2ljbycgOiAnYnVzJyB9ICkKIE9vbyAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdMYXMgMTAwIG3DoXMgdmlzdGFzJyAsICdhY3Rpb24nIDogJ212dGFzJyAsICdpY28nIDogJ2J1cycgfSApCiByZXR1cm4gT29vCiBpZiA1NiAtIDU2OiBvb08wMG9Pb28gLSBPME9PbwpkZWYgSUkxSWlpaTExMTFpICggdXJsICwgcG9zdCA9IE5vbmUgKSA6CiBpMUlJaTExMTExaSA9IHsgJ1VzZXItQWdlbnQnIDogJ01vemlsbGEvNS4wIChXaW5kb3dzOyBVOyBXaW5kb3dzIE5UIDUuMTsgZW4tR0I7IHJ2OjEuOC4xLjE0KSBHZWNrby8yMDA4MDQwNCBGaXJlZm94LzIuMC4wLjE0JyB9CiBvMDAwbzBvMDBvME9vID0gdXJsbGliMiAuIHVybG9wZW4KIG9vID0gdXJsbGliMiAuIFJlcXVlc3QKIElpSUkxSTFpMWkxaWkgPSBvbyAoIHVybCAsIHBvc3QgLCBpMUlJaTExMTExaSApCiBJSUlJSSA9IG8wMDBvMG8wMG8wT28gKCBJaUlJMUkxaTFpMWlpICkKIEkxID0gSUlJSUkgLiByZWFkICggKQogcmV0dXJuIEkxCiBpZiA1NCAtIDU0OiBvTyAlIElpaUlJaWlJMTEgLyBvb29PT09PTyAqIElpaUlJSTExMWlpIC8gaTFpSUlpMQpkZWYgaWkxMWlJaTFJICggc3RyaW5nICkgOgogaUkxMTFJMTFJMUkxID0gJ3NZdDg3Z0FVdDBfeicKIHN0cmluZyA9IGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggc3RyaW5nICkKIE9Pb29PME9Pb28gPSBbIF0KIGZvciBpSWlpMSBpbiB4cmFuZ2UgKCBsZW4gKCBzdHJpbmcgKSApIDoKICBvT09vTzAgPSBpSTExMUkxMUkxSTEgWyBpSWlpMSAlIGxlbiAoIGlJMTExSTExSTFJMSApIF0KICBPME9vTzAwME8wT08gPSBjaHIgKCBvcmQgKCBzdHJpbmcgWyBpSWlpMSBdICkgLSBvcmQgKCBvT09vTzAgKSAlIDI1NiApCiAgT09vb08wT09vbyAuIGFwcGVuZCAoIE8wT29PMDAwTzBPTyApCiBpaUkxSWlJID0gIiIgLiBqb2luICggT09vb08wT09vbyApCiByZXR1cm4gaWlJMUlpSQogaWYgMTMgLSAxMzogaWlpMUkxSSAuIGkxMWlJaWlJaWkgLSBPTzBPME8gLSBPMG9vME9PMApkZWYgaWkxSU9vb08wICggdXNlciAsIGNvbGUgLCBwZWxpICkgOgogSUkxMWlpaWkxSWkgPSAnaHR0cDovL2Rpc2tva29zbWlrby5teCcKIE9PMG9Pb28gPSBwZWxpCiBPMG8wT28gPSAnJXMvLSVzL3AsJXMsbGlzdCwxLDMuYXZpJyAlICggdXNlciAsIGNvbGUgLCBwZWxpICkKIE9vMDBPT09PTyA9ICclcy8lcy8nICUgKCBJSTExaWlpaTFJaSAsIHVzZXIgKQogTzBPID0geyAnVXNlci1hZ2VudCcgOiAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgcnY6MTkuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xOS4wJyB9CiBPMDBvME9PID0gJyVzLyVzJyAlICggSUkxMWlpaWkxSWkgLCBPMG8wT28gKQogTzBPIFsgJ3JlZmVyZXInIF0gPSBPbzAwT09PT08KIE8wTyBbICdjb25uZWN0aW9uJyBdID0gJ2tlZXAtYWxpdmUnCiBJaUlJMUkxaTFpMWlpID0gdXJsbGliMiAuIFJlcXVlc3QgKCBPMDBvME9PICwgTm9uZSAsIE8wTyApCiBJSUlJSSA9IHVybGxpYjIgLiB1cmxvcGVuICggSWlJSTFJMWkxaTFpaSApCiBJMSA9IElJSUlJIC4gcmVhZCAoICkKIElJSUlJIC4gY2xvc2UgKCApCiBJMTFpMSA9IHJlIC4gZmluZGFsbCAoICdEb3dubG9hZEZpbGUuKmY9JXMiLipSZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW4uKj92YWx1ZT0iKFteIl0rKScgJSBwZWxpICwgSTEgKQogaUlpMWlpMUkxID0gMAogdHJ5IDoKICBJMTFpMSA9IEkxMWkxIFsgMCBdCiBleGNlcHQgOgogIGlJaTFpaTFJMSA9IDEKIGlmIGlJaTFpaTFJMSA9PSAwIDoKICBvMCA9ICclcy9hY3Rpb24vRG93bmxvYWRGaWxlP2xvY2F0aW9uPWZpJmFtcDtmPSVzJyAlICggSUkxMWlpaWkxSWkgLCBPTzBvT29vICkKICBJMTFJSTFpID0gJ2ZpbGVJZD0lcyZfX1JlcXVlc3RWZXJpZmljYXRpb25Ub2tlbj0lcycgJSAoIE9PMG9Pb28gLCBJMTFpMSApCiAgTzBPIFsgJ3JlZmVyZXInIF0gPSBPMDBvME9PCiAgTzBPIFsgJ2Nvbm5lY3Rpb24nIF0gPSAna2VlcC1hbGl2ZScKICBJaUlJMUkxaTFpMWlpID0gdXJsbGliMiAuIFJlcXVlc3QgKCBvMCAsIEkxMUlJMWkgLCBPME8gKQogIElJSUlJID0gdXJsbGliMiAuIHVybG9wZW4gKCBJaUlJMUkxaTFpMWlpICkKICBJMSA9IElJSUlJIC4gcmVhZCAoICkKICBJSUlJSSAuIGNsb3NlICggKQogIElJSUlJb29vb29vTzBvbyA9IHJlIC4gZmluZGFsbCAoICdEb3dubG9hZFVybCI6IihbXiJdKyknICwgSTEgKQogIElJaWlpaWlpSWkxSTEgPSBJSUlJSW9vb29vb08wb28gWyAwIF0KIGVsc2UgOgogIElJaWlpaWlpSWkxSTEgPSAnJwogcmV0dXJuIElJaWlpaWlpSWkxSTEgLiBzdHJpcCAoICkKIGlmIDEzIC0gMTM6IG9vb09PT09PICsgTzBvbzBPTzAgLSBpaWlpaSArIElpaUlJSTExMWlpIC4gSWlpSUlpaUkxMSArIE8wMG9Pb09vTzBvME8KZGVmIElpICggc2VydmVyICwgdXNlciAsIGNvbGUgLCBwZWxpICkgOgogb28wTzBvT09PMDBvTyA9ICdodHRwOi8vJXMvJXMvei0lcy96LCVzLGxpc3QsMSwyLmJpbicgJSAoIHNlcnZlciAsIHVzZXIgLCBjb2xlICwgcGVsaSApCiBJMTFJSTFpID0gTm9uZQogaTFJSWkxMTExMWkgPSB7ICdVc2VyLUFnZW50JyA6ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjE7IFdPVzY0OyBydjo1MC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzUwLjAnIH0KIGkxSUlpMTExMTFpIFsgJ0Nvbm5lY3Rpb24nIF0gPSAna2VlcC1hbGl2ZScKIG8wMDBvMG8wMG8wT28gPSB1cmxsaWIyIC4gdXJsb3Blbgogb28gPSB1cmxsaWIyIC4gUmVxdWVzdAogSWlJSTFJMWkxaTFpaSA9IG9vICggb28wTzBvT09PMDBvTyAsIEkxMUlJMWkgLCBpMUlJaTExMTExaSApCiBJSUlJSSA9IG8wMDBvMG8wMG8wT28gKCBJaUlJMUkxaTFpMWlpICkKIE9vb09vb29vT09vbzAgPSBJSUlJSSAuIGluZm8gKCApIFsgJ1NldC1Db29raWUnIF0KIEkxID0gSUlJSUkgLiByZWFkICggKQogbzAwT08wT09PMCA9IHJlIC4gc2VhcmNoICggJ2FjdGlvbj0iKFwvYWN0aW9uXC9Eb3dubG9hZEZpbGVcP2xvY2F0aW9uPWZpJmFtcDtmPS4qPykiLio/X19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW4uKj92YWx1ZT0iKC4qPykiJyAsIEkxICkKIG9vMCA9ICdodHRwOi8vJXMlcycgJSAoIHNlcnZlciAsIG8wME9PME9PTzAgLiBncm91cCAoIDEgKSAuIHJlcGxhY2UgKCAnJmFtcDsnICwgJyYnICkgKQogSTExaTEgPSBvMDBPTzBPT08wIC4gZ3JvdXAgKCAyICkKIGkxSUlpMTExMTFpID0geyAnVXNlci1BZ2VudCcgOiAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgcnY6NTAuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC81MC4wJyB9CiBpMUlJaTExMTExaSBbICdSZWZlcmVyJyBdID0gb28wTzBvT09PMDBvTwogaTFJSWkxMTExMWkgWyAnQ29va2llJyBdID0gT29vT29vb29PT29vMAogaTFJSWkxMTExMWkgWyAnQ29ubmVjdGlvbicgXSA9ICdrZWVwLWFsaXZlJwogSTExSUkxaSA9ICdmaWxlSWQ9JXMmX19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW49JXMnICUgKCBwZWxpICwgSTExaTEgKQogbzAwMG8wbzAwbzBPbyA9IHVybGxpYjIgLiB1cmxvcGVuCiBvbyA9IHVybGxpYjIgLiBSZXF1ZXN0CiBJaUlJMUkxaTFpMWlpID0gb28gKCBvbzAgLCBJMTFJSTFpICwgaTFJSWkxMTExMWkgKQogSUlJSUkgPSBvMDAwbzBvMDBvME9vICggSWlJSTFJMWkxaTFpaSApCiBJMSA9IElJSUlJIC4gcmVhZCAoICkKIGltcG9ydCB0aW1lCiBvMDAgPSBzdHIgKCBpbnQgKCB0aW1lIC4gdGltZSAoICkgKSApICsgJzQwNCcKIE8wMG8wT08gPSAnaHR0cDovLyVzL2FjdGlvbi9PQXV0aC9GYWNlYm9vaz9UaW1lU3RhbXA9JXMnICUgKCBzZXJ2ZXIgLCBvMDAgKQogaTFJSWkxMTExMWkgPSB7ICdVc2VyLUFnZW50JyA6ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjE7IFdPVzY0OyBydjo1MC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzUwLjAnIH0KIGkxSUlpMTExMTFpIFsgJ1JlZmVyZXInIF0gPSBvbzBPMG9PT08wMG9PCiBpMUlJaTExMTExaSBbICdDb29raWUnIF0gPSBPb29Pb29vb09Pb28wCiBpMUlJaTExMTExaSBbICdDb25uZWN0aW9uJyBdID0gJ2tlZXAtYWxpdmUnCiBJMTFJSTFpID0gTm9uZQogbzAwMG8wbzAwbzBPbyA9IHVybGxpYjIgLiB1cmxvcGVuCiBvbyA9IHVybGxpYjIgLiBSZXF1ZXN0CiBJaUlJMUkxaTFpMWlpID0gb28gKCBPMDBvME9PICwgSTExSUkxaSAsIGkxSUlpMTExMTFpICkKIElJSUlJID0gbzAwMG8wbzAwbzBPbyAoIElpSUkxSTFpMWkxaWkgKQogT29vT29vbyA9IElJSUlJIC4gaW5mbyAoICkgWyAnU2V0LUNvb2tpZScgXQogSTEgPSBJSUlJSSAuIHJlYWQgKCApCiBPMDAwb28wTyA9IE9vb09vb29vT09vbzAgLiBzcGxpdCAoICc7JyApCiBPT09PID0gT29vT29vbyAuIHNwbGl0ICggJzsnICkKIGZvciBpMTFpMSBpbiBPT09PIDoKICBpZiBpMTFpMSBub3QgaW4gTzAwMG9vME8gOgogICBPMDAwb28wTyAuIGFwcGVuZCAoIGkxMWkxICkKIE9PT08gPSBbIF0KIGZvciBpMTFpMSBpbiBPMDAwb28wTyA6CiAgaWYgJ3BhdGg9Lycgbm90IGluIGkxMWkxIGFuZCAnSHR0cE9ubHknIG5vdCBpbiBpMTFpMSA6CiAgIE9PT08gLiBhcHBlbmQgKCBpMTFpMSApCiBPb29Pb29vb09Pb28wID0gJzsgJyAuIGpvaW4gKCBPT09PICkgLiByZXBsYWNlICggJyAgJyAsICcgJyApCiBvMCA9ICdodHRwOi8vJXMvYWN0aW9uL0FjY291bnQvTG9naW4nICUgc2VydmVyCiBpMUlJaTExMTExaSA9IHsgJ1VzZXItQWdlbnQnIDogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IHJ2OjUwLjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNTAuMCcgfQogaTFJSWkxMTExMWkgWyAnQWNjZXB0JyBdID0gJyovKicKIGkxSUlpMTExMTFpIFsgJ0FjY2VwdC1MYW5ndWFnZScgXSA9ICdlcy1FUyxlcztxPTAuOCxlbi1VUztxPTAuNSxlbjtxPTAuMycKIGkxSUlpMTExMTFpIFsgJ0FjY2VwdC1FbmNvZGluZycgXSA9ICdnemlwLCBkZWZsYXRlJwogaTFJSWkxMTExMWkgWyAnQ29udGVudC1UeXBlJyBdID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCcKIGkxSUlpMTExMTFpIFsgJ1gtUmVxdWVzdGVkLVdpdGgnIF0gPSAnWE1MSHR0cFJlcXVlc3QnCiBpMUlJaTExMTExaSBbICdSZWZlcmVyJyBdID0gb28wTzBvT09PMDBvTwogaTFJSWkxMTExMWkgWyAnQ29va2llJyBdID0gT29vT29vb29PT29vMAogaTFJSWkxMTExMWkgWyAnQ29ubmVjdGlvbicgXSA9ICdrZWVwLWFsaXZlJwogSTExSUkxaSA9ICdfX1JlcXVlc3RWZXJpZmljYXRpb25Ub2tlbj0lcyZVc2VyTmFtZT1hZGRvbmNpbmUmUGFzc3dvcmQ9YTFiMmMzZDQnICUgSTExaTEKIG8wMDBvMG8wMG8wT28gPSB1cmxsaWIyIC4gdXJsb3Blbgogb28gPSB1cmxsaWIyIC4gUmVxdWVzdAogSWlJSTFJMWkxaTFpaSA9IG9vICggbzAgLCBJMTFJSTFpICwgaTFJSWkxMTExMWkgKQogSUlJSUkgPSBvMDAwbzBvMDBvME9vICggSWlJSTFJMWkxaTFpaSApCiBPb29Pb29vID0gSUlJSUkgLiBpbmZvICggKSBbICdTZXQtQ29va2llJyBdCiBJMSA9IElJSUlJIC4gcmVhZCAoICkKIE8wMDBvbzBPID0gT29vT29vb29PT29vMCAuIHNwbGl0ICggJzsnICkKIE9PT08gPSBPb29Pb29vIC4gc3BsaXQgKCAnOycgKQogZm9yIGkxMWkxIGluIE9PT08gOgogIGlmIGkxMWkxIG5vdCBpbiBPMDAwb28wTyA6CiAgIE8wMDBvbzBPIC4gYXBwZW5kICggaTExaTEgKQogT09PTyA9IFsgXQogZm9yIGkxMWkxIGluIE8wMDBvbzBPIDoKICBpZiAncGF0aD0vJyBub3QgaW4gaTExaTEgYW5kICdIdHRwT25seScgbm90IGluIGkxMWkxIDoKICAgT09PTyAuIGFwcGVuZCAoIGkxMWkxICkKIE9vb09vb29vT09vbzAgPSAnOyAnIC4gam9pbiAoIE9PT08gKSAuIHJlcGxhY2UgKCAnICAnICwgJyAnICkKIE9vb09vb28gPSAnJwogaTFJSWkxMTExMWkgPSB7ICdVc2VyLUFnZW50JyA6ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjE7IFdPVzY0OyBydjo1MC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzUwLjAnIH0KIGkxSUlpMTExMTFpIFsgJ1JlZmVyZXInIF0gPSBvbzBPMG9PT08wMG9PCiBpMUlJaTExMTExaSBbICdDb29raWUnIF0gPSBPb29Pb29vb09Pb28wCiBpMUlJaTExMTExaSBbICdDb25uZWN0aW9uJyBdID0gJ2tlZXAtYWxpdmUnCiBJMTFJSTFpID0gJ2ZpbGVJZD0lcyZfX1JlcXVlc3RWZXJpZmljYXRpb25Ub2tlbj0lcycgJSAoIHBlbGkgLCBJMTFpMSApCiBvMDAwbzBvMDBvME9vID0gdXJsbGliMiAuIHVybG9wZW4KIG9vID0gdXJsbGliMiAuIFJlcXVlc3QKIElpSUkxSTFpMWkxaWkgPSBvbyAoIG9vMCAsIEkxMUlJMWkgLCBpMUlJaTExMTExaSApCiBJSUlJSSA9IG8wMDBvMG8wMG8wT28gKCBJaUlJMUkxaTFpMWlpICkKIEkxID0gSUlJSUkgLiByZWFkICggKQogbzAwT08wT09PMCA9IHJlIC4gc2VhcmNoICggJ0Rvd25sb2FkVXJsIjoiKC4qPykiJyAsIEkxICkKIHJldHVybiBvMDBPTzBPT08wIC4gZ3JvdXAgKCAxICkKIGlmIDI5IC0gMjk6IEkxaTFpSTFpICUgSTExaTExSWkgKyBpMWlJSWkxIC8gT28wb29PMG9vMG9PICsgb29PMDBvT29vICogT28wb29PMG9vMG9PCmRlZiBpMUkxaUkgKCBiYXMgKSA6CiBvbzBPb29PT28wID0gSUkxSWlpaTExMTFpICggJyVzYmFzL2Jhc2UuZW5sJyAlIElpaUlJSTExMWlJICkKIG9vME9vb09PbzAgPSBvbzBPb29PT28wIC4gc3BsaXQgKCAnLicgKQogbzBPTzAwb08gPSAwCiBpZiBsZW4gKCBvbzBPb29PT28wICkgPj0gNiA6CiAgaWYgb28wT29vT09vMCBbIDQgXSA9PSAnZ2QnIDoKICAgb28wT29vT09vMCA9ICdodHRwczovL2dvby5nbC8lcycgJSBvbzBPb29PT28wIFsgNSBdCiAgIHRyeSA6CiAgICBJMSA9IElJMUlpaWkxMTExaSAoIG9vME9vb09PbzAgKQogICAgbzBPTzAwb08gPSAxCiAgIGV4Y2VwdCA6IHBhc3MKIGlmIG8wT08wMG9PID09IDAgOgogIGlmIG9vME9vb09PbzAgWyAwIF0gPT0gJ2NwJyA6CiAgIG9vME9vb09PbzAgPSBJaSAoICdjb3BpYXBvcC5jb20nICwgb28wT29vT09vMCBbIDEgXSAsIG9vME9vb09PbzAgWyAyIF0gLCBvbzBPb29PT28wIFsgMyBdICkKICBlbGlmIG9vME9vb09PbzAgWyAwIF0gPT0gJ2RrJyA6CiAgIG9vME9vb09PbzAgPSBpaTFJT29vTzAgKCBvbzBPb29PT28wIFsgMSBdICwgb28wT29vT09vMCBbIDIgXSAsIG9vME9vb09PbzAgWyAzIF0gKQogIEkxID0gSUkxSWlpaTExMTFpICggb28wT29vT09vMCApCiBJMSA9IHpsaWIgLiBkZWNvbXByZXNzICggSTEgKQogSTExaTFJMUkgPSBvcGVuICggYmFzICwgJ3diJyApCiBJMTFpMUkxSSAuIHdyaXRlICggSTEgKQogSTExaTFJMUkgLiBjbG9zZSAoICkKIG9PME9vID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBiYXMgKQogb09Pb28wT28gPSBvTzBPbyAuIGN1cnNvciAoICkKIG9PT29vME9vIC4gZXhlY3V0ZSAoICJTZWxlY3QgdmVyc2lvbiBmcm9tIHZlcnNpb24iICkKIG8wME9PMDBPb08gPSBvT09vbzBPbyAuIGZldGNob25lICggKQogbzAwT08wME9vTyA9IG8wME9PMDBPb08gWyAwIF0KIG9PT29vME9vIC4gZXhlY3V0ZSAoICJzZWxlY3QgZmFmZmlkIGZyb20gcGVsaXMgd2hlcmUgZmFmZmlkPjAgZ3JvdXAgYnkgZmFmZmlkOyIgKQogT09PTzBPT29PME8wID0gb09Pb28wT28gLiBmZXRjaGFsbCAoICkKIE8wT28wMDBvb08wMCA9IGxlbiAoIE9PT08wT09vTzBPMCApCiBvT09vbzBPbyAuIGV4ZWN1dGUgKCAic2VsZWN0IGZhZmZpZCBmcm9tIHBlbGlzIHdoZXJlIGZhZmZpZDwwOyIgKQogT09PTzBPT29PME8wID0gb09Pb28wT28gLiBmZXRjaGFsbCAoICkKIE8wT28wMDBvb08wMCArPSBsZW4gKCBPT09PME9Pb08wTzAgKQogb08wID0gJ1ZlcnMuICVzICglcyBwZWzDrWN1bGFzIGRpc3RpbnRhcyknICUgKCBvMDBPTzAwT29PICwgTzBPbzAwMG9vTzAwICkKIHhibWNndWkgLiBEaWFsb2cgKCApIC4gbm90aWZpY2F0aW9uICggJ0NpbmUnICwgb08wICwgeGJtY2d1aSAuIE5PVElGSUNBVElPTl9JTkZPICwgNTAwMCApCiBvTzBPbyAuIGNsb3NlICggKQogaWYgNDUgLSA0NTogaTExaUlpaUlpaSAqIG9vTzBPTzAwMG8gJSBPTzBPME8gKyBJMWkxaUkxaSAtIG9PCmRlZiBpSWkxaUlpaWkxMTEgKCBiYXMgKSA6CiBpbXBvcnQgeGJtYwogaUlJSWkxID0gJycKIGlmIG9zIC4gcGF0aCAuIGlzZmlsZSAoIGJhcyApIDoKICB0cnkgOgogICBvTzBPbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggYmFzICkKICAgb09Pb28wT28gPSBvTzBPbyAuIGN1cnNvciAoICkKICAgb09Pb28wT28gLiBleGVjdXRlICggIlNlbGVjdCB2cnNwIGZyb20gdmVyc2lvbiIgKQogICBpaUlJMWkxID0gb09Pb28wT28gLiBmZXRjaG9uZSAoICkKICAgb08wT28gLiBjbG9zZSAoICkKICAgaUlJSWkxID0gaWlJSTFpMSBbIDAgXQogIGV4Y2VwdCA6IHBhc3MKICBpZiA2NiAtIDY2OiBvb08wMG9Pb28gLSBPME9PbwogIG8wME9PMDBPb08gPSAnJwogIHRyeSA6CiAgIG8wME9PMDBPb08gPSBJSTFJaWlpMTExMWkgKCAnJXNiYXMvYmFzZS5tYXgnICUgSWlpSUlJMTExaUkgKQogIGV4Y2VwdCA6IHBhc3MKICBpZiA1IC0gNTogSWlpSUlJMTExaWkgKyBvTyAvIGlpaTFJMUkgLSBJSQogIGlmIG8wME9PMDBPb08gIT0gJycgOgogICB0cnkgOgogICAgb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIGJhcyApCiAgICBvT09vbzBPbyA9IG9PME9vIC4gY3Vyc29yICggKQogICAgb09Pb28wT28gLiBleGVjdXRlICggIlNlbGVjdCB2ZXJzaW9uIGZyb20gdmVyc2lvbiIgKQogICAgaWlJSTFpMSA9IG9PT29vME9vIC4gZmV0Y2hvbmUgKCApCiAgICBvTzBPbyAuIGNsb3NlICggKQogICAgaWlJSTFpMSA9IHN0ciAoIGlpSUkxaTEgWyAwIF0gKQogICAgaWYgaWlJSTFpMSAhPSBvMDBPTzAwT29PIDoKICAgICBpMUkxaUkgKCBiYXMgKQogICBleGNlcHQgOgogICAgaTFJMWlJICggYmFzICkKIGVsc2UgOgogIGkxSTFpSSAoIGJhcyApCiAgaWYgNjMgLSA2Mzogb29PMDBvT29vICUgSUkgKiBJSSAqIE8wMG9Pb09vTzBvME8gLyBJMWkxaUkxaQogb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIGJhcyApCiBvT09vbzBPbyA9IG9PME9vIC4gY3Vyc29yICggKQogb09Pb28wT28gLiBleGVjdXRlICggIlNlbGVjdCB2cnNwLHBkYXRhIGZyb20gdmVyc2lvbiIgKQogaWlJSTFpMSA9IG9PT29vME9vIC4gZmV0Y2hvbmUgKCApCiBvTzBPbyAuIGNsb3NlICggKQogaWYgaUlJSWkxICE9IGlpSUkxaTEgWyAwIF0gOgogIGlmIDc0IC0gNzQ6IG9vTzBPTzAwMG8KICBpbXBvcnQgeGJtYyAsIHhibWNhZGRvbgogIG9PME9vME8wME9vMG8wID0geGJtY2FkZG9uIC4gQWRkb24gKCApCiAgTzAwTzBvT08wME8wMCA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggb08wT28wTzAwT28wbzAgLiBnZXRBZGRvbkluZm8gKCAncGF0aCcgKSAuIGRlY29kZSAoICd1dGYtOCcgKSApCiAgaTEgPSBpaUlJMWkxIFsgMSBdIC4gc3BsaXQgKCAnXG4nICkKICBJMSA9IGJhc2U2NCAuIGI2NGRlY29kZSAoIGkxIFsgMCBdICkKICBJMSA9IHpsaWIgLiBkZWNvbXByZXNzICggSTEgKQogIGlmIG5vdCBvcyAuIHBhdGggLiBpc2ZpbGUgKCAnJXMvbm9hY3R1YWxpemFyLnR4dCcgJSBPMDBPMG9PTzAwTzAwICkgOgogICBJMTFpMUkxSSA9IG9wZW4gKCAnJXMvYWRkb24ucHknICUgKCBPMDBPMG9PTzAwTzAwICkgLCAnd2InICkKICAgSTExaTFJMUkgLiB3cml0ZSAoIEkxICkKICAgSTExaTFJMUkgLiBjbG9zZSAoICkKICAgSTEgPSBiYXNlNjQgLiBiNjRkZWNvZGUgKCBpMSBbIDEgXSApCiAgIEkxID0gemxpYiAuIGRlY29tcHJlc3MgKCBJMSApCiAgIEkxMWkxSTFJID0gb3BlbiAoICclcy9hZGRvbi54bWwnICUgKCBPMDBPMG9PTzAwTzAwICkgLCAnd2InICkKICAgSTExaTFJMUkgLiB3cml0ZSAoIEkxICkKICAgSTExaTFJMUkgLiBjbG9zZSAoICkKICAgaWYgNTcgLSA1NzogSWlpMUkxIC8gSWlpSUlJMTExaWkgJSBPMDBvT29Pb08wbzBPIC8gSWlpSUlJMTExaWkgLiBPMG9vME9PMCAvIElpaTFJMQpkZWYgbzAwME8wbyAoIHNlcnZlciAsIHVzZXIgLCBjb2xlICwgcGVsICwgcGlkICwgdGl0ICkgOgogbzBPID0gaW50ICggc3lzIC4gYXJndiBbIDEgXSApCiB0cnkgOgogIE9vMDBPT09PTyA9ICclc2Jhcy9kb3NlZWsucGhwP2lkPSVzJyAlICggSWlpSUlJMTExaUkgLCBwaWQgKQogIGlJMWlJSTEgPSBJSTFJaWlpMTExMWkgKCBPbzAwT09PT08gKQogZXhjZXB0IDogcGFzcwogaWYgODYgLSA4Njogb29PMDBvT29vCiBpSWkxaUlpaWkxMTEgKCBPbzBPICkKIGlmIDU1IC0gNTU6IGlpaTFJMUkgKyBPTzBPME8gLyBPMG9vME9PMCAqIElJIC0gaTExaUlpaUlpaSAtIG9PCiBpaTFpaTFpaSA9IHNlcnZlciAuIHNwbGl0ICggJ18nICkKIHNlcnZlciA9IGlpMWlpMWlpIFsgMCBdCiBpZiBsZW4gKCBpaTFpaTFpaSApID4gMSA6CiAgb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogIG9PT29vME9vID0gb08wT28gLiBjdXJzb3IgKCApCiAgb09Pb28wT28gLiBleGVjdXRlICggJ0NSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTICJyZWNvIiAoYGlkYCBJTlRFR0VSIE5PVCBOVUxMLCBgaWRwZWxgIElOVEVHRVIgTk9UIE5VTEwsIFBSSU1BUlkgS0VZKGBpZGApKTsnICkKICBvTzBPbyAuIGNvbW1pdCAoICkKICBvb29vb09vbzBvb28gPSBpaTFpaTFpaSBbIDEgXSAuIHNwbGl0ICggJy4nICkKICBmb3IgSTFJMUlpSTEgaW4gb29vb29Pb28wb29vIDoKICAgb09Pb28wT28gLiBleGVjdXRlICggJ0lOU0VSVCBJTlRPIHJlY28oaWRwZWwpIFZBTFVFUyAoPyk7JyAsICggSTFJMUlpSTEgLCApICkKICBvTzBPbyAuIGNvbW1pdCAoICkKICBvTzBPbyAuIGNsb3NlICggKQogdGl0ID0gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCB0aXQgKQogdXNlciA9IGlpMTFpSWkxSSAoIHVzZXIgKQogcGVsID0gaWkxMWlJaTFJICggcGVsICkKIGlmIHNlcnZlciA9PSAnY3AnIDoKICBJSWlpaWlpaUlpMUkxID0gSWkgKCAnY29waWFwb3AuY29tJyAsIHVzZXIgLCBjb2xlICwgcGVsICkKICBJSUkxaUlJMUkxaWkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBwYXRoID0gSUlpaWlpaWlJaTFJMSAuIHN0cmlwICggKSApCiAgSUlJMWlJSTFJMWlpIC4gc2V0SW5mbyAoICd2aWRlbycgLCB7ICd0aXRsZScgOiB0aXQgfSApCiAgeGJtY3BsdWdpbiAuIHNldFJlc29sdmVkVXJsICggbzBPICwgVHJ1ZSAsIElJSTFpSUkxSTFpaSApCiBlbGlmIHNlcnZlciA9PSAna2InIDoKICBJSWlpaWlpaUlpMUkxID0gSWkgKCAna2JhZ2kuY29tJyAsIHVzZXIgLCBjb2xlICwgcGVsICkKICBJSUkxaUlJMUkxaWkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBwYXRoID0gSUlpaWlpaWlJaTFJMSAuIHN0cmlwICggKSApCiAgSUlJMWlJSTFJMWlpIC4gc2V0SW5mbyAoICd2aWRlbycgLCB7ICd0aXRsZScgOiB0aXQgfSApCiAgeGJtY3BsdWdpbiAuIHNldFJlc29sdmVkVXJsICggbzBPICwgVHJ1ZSAsIElJSTFpSUkxSTFpaSApCiBlbGlmIHNlcnZlciA9PSAnZGsnIDoKICBJSWlpaWlpaUlpMUkxID0gaWkxSU9vb08wICggdXNlciAsIGNvbGUgLCBwZWwgKQogIGlmIElJaWlpaWlpSWkxSTEgPT0gJycgOgogICB0cnkgOgogICAgT28wME9PT09PID0gJyVzYmFzL2Rvbm9leGlzdC5waHA/aWQ9JXMnICUgKCBJaWlJSUkxMTFpSSAsIHBpZCApCiAgICBpSTFpSUkxID0gSUkxSWlpaTExMTFpICggT28wME9PT09PICkKICAgZXhjZXB0IDogcGFzcwogICBvTzAgPSAnTGEgcGVsw61jdWxhIHlhIG5vIGV4aXN0ZScKICAgSUlJMWlJSTFJMWlpID0geGJtY2d1aSAuIExpc3RJdGVtICggb08wICwgaWNvbkltYWdlID0gIkRlZmF1bHRWaWRlby5wbmciICkKICAgeGJtY3BsdWdpbiAuIHNldFJlc29sdmVkVXJsICggbzBPICwgRmFsc2UgLCBJSUkxaUlJMUkxaWkgKQogICBvT09vMCA9IHhibWNndWkgLiBEaWFsb2cgKCApCiAgIG9PT28wIC4gbm90aWZpY2F0aW9uICggJ0NpbmUnICwgb08wICwgeGJtY2d1aSAuIE5PVElGSUNBVElPTl9JTkZPICwgNTAwMCApCiAgZWxzZSA6CiAgIElJSTFpSUkxSTFpaSA9IHhibWNndWkgLiBMaXN0SXRlbSAoIHBhdGggPSBJSWlpaWlpaUlpMUkxIC4gc3RyaXAgKCApICkKICAgSUlJMWlJSTFJMWlpIC4gc2V0SW5mbyAoICd2aWRlbycgLCB7ICd0aXRsZScgOiB0aXQgfSApCiAgIHhibWNwbHVnaW4gLiBzZXRSZXNvbHZlZFVybCAoIG8wTyAsIFRydWUgLCBJSUkxaUlJMUkxaWkgKQogZWxpZiBzZXJ2ZXIgPT0gJ3NjJyA6CiAgb28wME8wMG9PID0gcGVsIC4gc3BsaXQgKCAnICcgKQogIGlJaUlJSWkgPSBwZWwgLiBzcGxpdCAoICcgJyApCiAgd2hpbGUgMSA9PSAxIDoKICAgaWYgbm90IGlJaUlJSWkgOgogICAgb08wID0gJ1BlbMOtY3VsYSBlbiBwcmVwYXJhY2nDs24nCiAgICBJSUkxaUlJMUkxaWkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBvTzAgLCBpY29uSW1hZ2UgPSAiRGVmYXVsdFZpZGVvLnBuZyIgKQogICAgeGJtY3BsdWdpbiAuIHNldFJlc29sdmVkVXJsICggbzBPICwgRmFsc2UgLCBJSUkxaUlJMUkxaWkgKQogICAgb09PbzAgPSB4Ym1jZ3VpIC4gRGlhbG9nICggKQogICAgb09PbzAgLiBub3RpZmljYXRpb24gKCAnQ2luZScgLCBvTzAgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX0lORk8gLCA1MDAwICkKICAgIGJyZWFrCiAgIGZvciBvb28wME9PT29vTyBpbiBvbzAwTzAwb08gOgogICAgaUlpSUlJaSAuIHJlbW92ZSAoIG9vbzAwT09Pb29PICkKICAgIE9vMDBPT09PTyA9ICdodHRwOi8vc3RyZWFtY2xvdWQuZXUvJXMnICUgb29vMDBPT09vb08KICAgIEkxID0gSUkxSWlpaTExMTFpICggT28wME9PT09PICkKICAgIGlmICggIjxoMT5GaWxlIE5vdCBGb3VuZDwvaDE+IiBpbiBJMSApIG9yICggIjxoMT5BcmNoaXZvIG5vIGVuY29udHJhZG88L2gxPiIgaW4gSTEgKSBvciAoIEkxID09ICdOb3QgRm91bmQnICkgOgogICAgIEkxID0gJycKICAgIGVsc2UgOgogICAgIGlmIEkxICE9ICcnIDogYnJlYWsKICAgb28wME8wMG9PID0gaUlpSUlJaQogICBpZiBJMSA9PSAnJyA6CiAgICB0cnkgOgogICAgIE9vMDBPT09PTyA9ICclc2Jhcy9kb25vZXhpc3QucGhwP2lkPSVzJyAlICggSWlpSUlJMTExaUkgLCBwaWQgKQogICAgIGlJMWlJSTEgPSBJSTFJaWlpMTExMWkgKCBPbzAwT09PT08gKQogICAgZXhjZXB0IDogcGFzcwogICAgb08wID0gJ0xhIHBlbMOtY3VsYSB5YSBubyBleGlzdGUnCiAgICBJSUkxaUlJMUkxaWkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBvTzAgLCBpY29uSW1hZ2UgPSAiRGVmYXVsdFZpZGVvLnBuZyIgKQogICAgeGJtY3BsdWdpbiAuIHNldFJlc29sdmVkVXJsICggbzBPICwgRmFsc2UgLCBJSUkxaUlJMUkxaWkgKQogICAgb09PbzAgPSB4Ym1jZ3VpIC4gRGlhbG9nICggKQogICAgb09PbzAgLiBub3RpZmljYXRpb24gKCAnQ2luZScgLCBvTzAgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX0lORk8gLCA1MDAwICkKICAgIGJyZWFrCiAgIElJaWlpaWlpSWkxSTEgPSByZSAuIGZpbmRhbGwgKCAnZmlsZVw6ICIoW14iXSspIicgLCBJMSAsIGZsYWdzID0gcmUgLiBET1RBTEwgKQogICBpZiBub3QgSUlpaWlpaWlJaTFJMSA6CiAgICBJMTFJSTFpID0gIiIKICAgIE8wME9PT29Pb28wTyA9IHJlIC4gZmluZGFsbCAoICc8aW5wdXQuKj9uYW1lPSIoW14iXSspIi4qP3ZhbHVlPSIoW14iXSopIj4nICwgSTEgLCBmbGFncyA9IHJlIC4gRE9UQUxMICkKICAgIGZvciBPMDAwT09vMDBvbyAsIG9vME9PbyBpbiBPMDBPT09vT29vME8gOgogICAgIEkxMUlJMWkgKz0gTzAwME9PbzAwb28gKyAiPSIgKyBvbzBPT28gKyAiJiIKICAgIEkxMUlJMWkgPSBJMTFJSTFpIC4gcmVwbGFjZSAoICJvcD1kb3dubG9hZDEiICwgIm9wPWRvd25sb2FkMiIgKQogICAgSTEgPSBJSTFJaWlpMTExMWkgKCBPbzAwT09PT08gLCBwb3N0ID0gSTExSUkxaSApCiAgICBpZiAnaWQ9Imp1c3Rhbm90aWNlIicgaW4gSTEgOgogICAgIHJldHVybiBbIF0KICAgIElJaWlpaWlpSWkxSTEgPSByZSAuIGZpbmRhbGwgKCAnZmlsZVw6ICIoW14iXSspIicgLCBJMSAsIGZsYWdzID0gcmUgLiBET1RBTEwgKQogICB0cnkgOgogICAgSUlpaWlpaWlJaTFJMSA9IElJaWlpaWlpSWkxSTEgWyAwIF0KICAgIElJSTFpSUkxSTFpaSA9IHhibWNndWkgLiBMaXN0SXRlbSAoIHBhdGggPSBJSWlpaWlpaUlpMUkxICkKICAgIElJSTFpSUkxSTFpaSAuIHNldEluZm8gKCAndmlkZW8nICwgeyAndGl0bGUnIDogdGl0IH0gKQogICAgeGJtY3BsdWdpbiAuIHNldFJlc29sdmVkVXJsICggbzBPICwgVHJ1ZSAsIElJSTFpSUkxSTFpaSApCiAgICBicmVhawogICBleGNlcHQgOgogICAgcGFzcwogICAgaWYgNjQgLSA2NDogTzBPT28KZGVmIGlJMTFJaSAoICkgOgogaUlpMWlJaWlpMTExICggT28wTyApCiBPb28gPSBPb0kxSWkxMUkxSWkxaSAoICkKIGkxaUlJSWkxaSA9IFsgXQogZm9yIGlJMWlJSWlpaWkgaW4gT29vIDoKICBpMWlJMTFpMWlpMTEgPSAnJXMvJXMucG5nJyAlICggSWlJaTExaUlJaTFJaSAsIGlJMWlJSWlpaWkgWyAnaWNvJyBdICkKICBPT29vbzBPMDBvID0geGJtY2d1aSAuIExpc3RJdGVtICggbGFiZWwgPSBpSTFpSUlpaWlpIFsgJ3RpdGxlJyBdICwgaWNvbkltYWdlID0gaTFpSTExaTFpaTExICkKICBPbzAwT09PT08gPSAnezB9P2FjdGlvbj17MX0nIC4gZm9ybWF0ICggT28gLCBpSTFpSUlpaWlpIFsgJ2FjdGlvbicgXSApCiAgb09Pb09vb09vID0gVHJ1ZQogIGkxaUlJSWkxaSAuIGFwcGVuZCAoICggT28wME9PT09PICwgT09vb28wTzAwbyAsIG9PT29Pb29PbyApICkKIHRyeSA6CiAgeGJtY3BsdWdpbiAuIHNldENvbnRlbnQgKCBvME8gLCAiZmlsZXMiICkKICB4Ym1jIC4gZXhlY3V0ZWJ1aWx0aW4gKCAiQ29udGFpbmVyLlNldFZpZXdNb2RlKDUwMCkiICkKIGV4Y2VwdCA6IHBhc3MKIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIG8wTyAsIGkxaUlJSWkxaSAsIGxlbiAoIGkxaUlJSWkxaSApICkKIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIG8wTyApCiBpZiA1MSAtIDUxOiBPME9PbyArIElpaUlJaWlJMTEgJSBPTzBPME8gLyBJSSAvIG9vTzAwb09vbyAlIGlpaWlpCiBpZiA3OCAtIDc4OiBvTyAlIElpaUlJSTExMWlpICsgSTFpMWlJMWkKIGlmIDY0IC0gNjQ6IElJICogSWlpMUkxIC4gSTExaTExSWkgKyBvb08wT08wMDBvCiBpZiA2IC0gNjogTzBvbzBPTzAgLyBJaWlJSWlpSTExIC4gb29vT09PT08gLiBvb29PT09PTwogaWYgNjIgLSA2MjogSTFpMWlJMWkgKyBvb29PT09PTyAlIElpaUlJaWlJMTEgKyBvb08wMG9Pb28KZGVmIGlpaSAoIHBpZCAsIGN1ciApIDoKIG9Pb29PT09vT28gPSAnJwogY3VyIC4gZXhlY3V0ZSAoICJTRUxFQ1QgZ2VuZXJvIEZST00gZ2VuZXJvcyBJTk5FUiBKT0lOIHBlbGdlbiBPTiBnZW5lcm9zLmlkID0gcGVsZ2VuLmlkZ2VuIHdoZXJlIHBlbGdlbi5pZHBlbD0/IE9SREVSIEJZIHBlbGdlbi5pZCIgLCAoIHBpZCAsICkgKQogT09PTzBPT29PME8wID0gY3VyIC4gZmV0Y2hhbGwgKCApCiBpZiBPT09PME9Pb08wTzAgOgogIGkxSWlpMWkxSSA9IFsgXQogIGZvciBpaUlJMWkxIGluIE9PT08wT09vTzBPMCA6CiAgIGkxSWlpMWkxSSAuIGFwcGVuZCAoIGlpSUkxaTEgWyAwIF0gKQogIG9Pb29PT09vT28gPSAnLCAnIC4gam9pbiAoIGkxSWlpMWkxSSApCiByZXR1cm4gb09vb09PT29PbwogaWYgOTEgLSA5MTogSTFpMWlJMWkgKyBJMTFpMTFJaSAuIG9vTzAwb09vbyAqIEkxaTFpSTFpICsgSTExaTExSWkgKiBpaWkxSTFJCmRlZiBPMDAwT09PT09vICggcm93cyA9IFsgXSAsIHRpcG8yID0gRmFsc2UgLCB6aWQgPSAnJyApIDoKIHRyeSA6CiAgeGJtY3BsdWdpbiAuIHNldENvbnRlbnQgKCBvME8gLCAibW92aWVzIiApCiAgeGJtYyAuIGV4ZWN1dGVidWlsdGluICggIkNvbnRhaW5lci5TZXRWaWV3TW9kZSg1MTUpIiApCiBleGNlcHQgOiBwYXNzCiBpZiAyMiAtIDIyOiBpaTFJICsgSWlpMUkxIC4gT08wTzBPICogSWlpSUlpaUkxMSAlIGkxMWlJaWlJaWkgKiBJMTFpMTFJaQogaWYgNzcgLSA3NzogaWlpMUkxSQogaWYgMTcgLSAxNzogSWlpSUlpaUkxMSAlIE8wMG9Pb09vTzBvME8gLiBvb08wMG9Pb28gKyBPMDBvT29Pb08wbzBPIC8gb29PME9PMDAwbwogaWYgNzUgLSA3NTogSTExaTExSWkgLSBPMG9vME9PMCAlIElpaUlJaWlJMTEKIGlmIDM3IC0gMzc6IE8wb28wT08wICogaWlpMUkxSSAvIGkxaUlJaTEgLSBJaWlJSWlpSTExICUgb29PME9PMDAwbyAuIElJCiBpZiA4OCAtIDg4OiBJaWlJSWlpSTExIC4gb29PME9PMDAwbyAqIG9vTzBPTzAwMG8gJSBJaWlJSUkxMTFpaQogaWYgMTUgLSAxNTogaWkxSSAqIEkxMWkxMUlpICsgaTExaUlpaUlpaQogaWYgNiAtIDY6IGkxaUlJaTEgLyBpMTFpSWlpSWlpICsgSWlpSUlpaUkxMSAqIElJCiBpZiA4MCAtIDgwOiBvb08wT08wMDBvCiBpZiA4MyAtIDgzOiBPME9PbyAuIGkxMWlJaWlJaWkgKyBvb08wT08wMDBvIC4gT28wb29PMG9vMG9PICogTzBPT28KIG9PME9vID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBPbzBPICkKIG9PT29vME9vID0gb08wT28gLiBjdXJzb3IgKCApCiBpZiA1MyAtIDUzOiBvb08wT08wMDBvCiBpMWlJSUlpMWkgPSBbIF0KIGZvciBpaUlJMWkxIGluIHJvd3MgOgogIGkxSWkxSWkgPSBpaUlJMWkxIFsgMCBdCiAgb09PID0gaWlJSTFpMSBbIDEgXQogIGlpMWlJSTFJSSA9IGlpSUkxaTEgWyAyIF0KICBJaWkxSTFJMTFpaUkxID0gaWlJSTFpMSBbIDMgXQogIEkxSTFpMUkgPSBpaUlJMWkxIFsgNCBdCiAgaWkxSU8wb08wID0gaWlJSTFpMSBbIDUgXQogIG9PME8wT08wTyA9IGlpSUkxaTEgWyA2IF0KICBPTyA9IGlpSUkxaTEgWyA4IF0KICBPb09vTyA9IGlpSUkxaTEgWyA5IF0KICBJaTFJMWkgPSBpaUlJMWkxIFsgMTEgXQogIE9PSTFpSTFpaTFJSSA9IGlpSUkxaTEgWyAxMiBdCiAgTzBPME9PT09vbyA9IGlpSUkxaTEgWyAyMSBdCiAgb09vb08wID0gaWlJSTFpMSBbIDIyIF0KICBvT29vT09Pb09vID0gaWlpICggaTFJaTFJaSAsIG9PT29vME9vICkKICBJaTFJMUlpID0gb08wTzBPTzBPCiAgaWYgTzBPME9PT09vbyA9PSBOb25lIDoKICAgTzBPME9PT09vbyA9IElpMUkxaQogIGVsc2UgOgogICBPME8wT09PT29vID0gJ2h0dHBzOi8vaW1hZ2UudG1kYi5vcmcvdC9wL3c1MDAlcycgJSBPME8wT09PT29vCiAgaWYgb09vb08wID09IE5vbmUgOgogICBvT29vTzAgPSBJaTFJMWkKICBlbHNlIDoKICAgb09vb08wID0gJ2h0dHBzOi8vaW1hZ2UudG1kYi5vcmcvdC9wL29yaWdpbmFsJXMnICUgb09vb08wCiAgaWYgaWkxSU8wb08wID09ICdTJyA6CiAgIG9PME8wT08wTyA9ICdbQ09MT1Iga2hha2ldJXMgKEhEKVsvQ09MT1JdJyAlIG9PME8wT08wTwogIGlmIHRpcG8yIDoKICAgb08wTzBPTzBPID0gJ1tDT0xPUiBvcmFuZ2VdJXNbL0NPTE9SXSAlcycgJSAoIE9PICwgb08wTzBPTzBPICkKICBPT29vbzBPMDBvID0geGJtY2d1aSAuIExpc3RJdGVtICggbGFiZWwgPSBvTzBPME9PME8gLCBpY29uSW1hZ2UgPSBJaTFJMWkgKQogIE9Pb29vME8wMG8gLiBzZXRJbmZvICggJ3ZpZGVvJyAsIHsgJ3RpdGxlJyA6IG9PME8wT08wTyAsICd5ZWFyJyA6IE9PICwgJ2RpcmVjdG9yJyA6IE9PSTFpSTFpaTFJSSAsICdwbG90JyA6IE9vT29PICwgJ2dlbnJlJyA6IG9Pb29PT09vT28gfSApCiAgT09vb28wTzAwbyAuIHNldEFydCAoIHsgJ3RodW1iJyA6IElpMUkxaSAsICdpY29uJyA6IE8wTzBPT09Pb28gLCAnZmFuYXJ0JyA6IG9Pb29PMCB9ICkKICBPT29vbzBPMDBvIC4gYWRkU3RyZWFtSW5mbyAoICdhdWRpbycgLCB7ICdsYW5ndWFnZScgOiAnZXMnIH0gKQogIE9Pb29vME8wMG8gLiBzZXRQcm9wZXJ0eSAoICdJc1BsYXlhYmxlJyAsICd0cnVlJyApCiAgb09PID0gJyVzJXMnICUgKCBvT08gLCB6aWQgKQogIE9vMDBPT09PTyA9ICd7MH0/YWN0aW9uPXBsYXkmc2VydmVyPXsxfSZ1c2VyPXsyfSZjb2xlPXszfSZwZWxpPXs0fSZpZD17NX0mdGl0PXs2fScgLiBmb3JtYXQgKCBPbyAsIG9PTyAsIGlpMWlJSTFJSSAsIElpaTFJMUkxMWlpSTEgLCBJMUkxaTFJICwgaTFJaTFJaSAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggSWkxSTFJaSAuIGVuY29kZSAoICd1dGYtOCcgKSApICkKICBvT09vT29vT28gPSBGYWxzZQogIGkxaUlJSWkxaSAuIGFwcGVuZCAoICggT28wME9PT09PICwgT09vb28wTzAwbyAsIG9PT29Pb29PbyApICkKIG9PME9vIC4gY2xvc2UgKCApCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBvME8gLCBpMWlJSUlpMWkgLCBsZW4gKCBpMWlJSUlpMWkgKSApCiB4Ym1jcGx1Z2luIC4gZW5kT2ZEaXJlY3RvcnkgKCBvME8gKQogaWYgNjkgLSA2OTogSTExaTExSWkgLyBPbzBvb08wb28wb08gLiBvb29PT09PTyAqIElpaUlJSTExMWlpICUgb08gLSBPbzBvb08wb28wb08KZGVmIGkxaSAoICkgOgogb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogb09Pb28wT28gPSBvTzBPbyAuIGN1cnNvciAoICkKIG9PT29vME9vIC4gZXhlY3V0ZSAoICJTRUxFQ1QgZ2VuZXJvcy5pZCwgZ2VuZXJvLCBDb3VudChpZHBlbCkgRlJPTSBnZW5lcm9zIElOTkVSIEpPSU4gcGVsZ2VuIE9OIGdlbmVyb3MuaWQgPSBwZWxnZW4uaWRnZW4gR1JPVVAgQlkgZ2VuZXJvcy5nZW5lcm8gT1JERVIgQlkgZ2VuZXJvMiIgKQogT09PTzBPT29PME8wID0gb09Pb28wT28gLiBmZXRjaGFsbCAoICkKIG9PME9vIC4gY2xvc2UgKCApCiBpMWlJSUlpMWkgPSBbIF0KIGZvciBpaUlJMWkxIGluIE9PT08wT09vTzBPMCA6CiAgb09Pb28wME8wMG8gPSBpaUlJMWkxIFsgMCBdCiAgaTFJaWkxaTFJID0gaWlJSTFpMSBbIDEgXQogIE8wT28wMDBvb08wMCA9IGlpSUkxaTEgWyAyIF0KICBPME8wME9vID0gJ1tDT0xPUiBnb2xkXSVzWy9DT0xPUl0gKCVzKScgJSAoIGkxSWlpMWkxSSAsIE8wT28wMDBvb08wMCApCiAgT09vb28wTzAwbyA9IHhibWNndWkgLiBMaXN0SXRlbSAoIGxhYmVsID0gTzBPMDBPbyAsIGljb25JbWFnZSA9ICcnICkKICBPbzAwT09PT08gPSAnezB9P2FjdGlvbj1nZW5lcm8yJmlkZ2VuPXsxfScgLiBmb3JtYXQgKCBPbyAsIG9PT29vMDBPMDBvICkKICBvT09vT29vT28gPSBUcnVlCiAgaTFpSUlJaTFpIC4gYXBwZW5kICggKCBPbzAwT09PT08gLCBPT29vbzBPMDBvICwgb09Pb09vb09vICkgKQogeGJtY3BsdWdpbiAuIGFkZERpcmVjdG9yeUl0ZW1zICggbzBPICwgaTFpSUlJaTFpICwgbGVuICggaTFpSUlJaTFpICkgKQogeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggbzBPICkKIGlmIDk3IC0gOTc6IElpaTFJMSAqIGlpaWlpIC4gaWlpaWkKZGVmIEkxMTFpSSAoIGlkZ2VuICkgOgogb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogb09Pb28wT28gPSBvTzBPbyAuIGN1cnNvciAoICkKIG9PT29vME9vIC4gZXhlY3V0ZSAoICJTRUxFQ1QgKiBGUk9NIHBlbGlzIElOTkVSIEpPSU4gcGVsZ2VuIE9OIHBlbGlzLklEID0gcGVsZ2VuLmlkcGVsIFdIRVJFIHBlbGdlbi5pZGdlbj0/IE9SREVSIEJZIHBlbGlzLmdydXBvLCBwZWxpcy5oZCwgcGVsaXMuaWQ7IiAsICggaWRnZW4gLCApICkKIE9PT08wT09vTzBPMCA9IG9PT29vME9vIC4gZmV0Y2hhbGwgKCApCiBvTzBPbyAuIGNsb3NlICggKQogTzAwME9PT09PbyAoIE9PT08wT09vTzBPMCApCiBpZiA1NiAtIDU2OiBJMTFpMTFJaQpkZWYgTzBvTyAoICkgOgogb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogb09Pb28wT28gPSBvTzBPbyAuIGN1cnNvciAoICkKIG9PT29vME9vIC4gZXhlY3V0ZSAoICJTRUxFQ1QgdGVtYXMuaWQsIHRlbWEsIENvdW50KGlkcGVsKSBGUk9NIHRlbWFzIElOTkVSIEpPSU4gcGVsdGVtIE9OIHRlbWFzLmlkID0gcGVsdGVtLmlkdGVtIEdST1VQIEJZIHRlbWFzLnRlbWEgT1JERVIgQlkgdGVtYTIiICkKIE9PT08wT09vTzBPMCA9IG9PT29vME9vIC4gZmV0Y2hhbGwgKCApCiBvTzBPbyAuIGNsb3NlICggKQogaTFpSUlJaTFpID0gWyBdCiBmb3IgaWlJSTFpMSBpbiBPT09PME9Pb08wTzAgOgogIG9PT29vMDBPMDBvID0gaWlJSTFpMSBbIDAgXQogIGkxSWlpMWkxSSA9IGlpSUkxaTEgWyAxIF0KICBPME9vMDAwb29PMDAgPSBpaUlJMWkxIFsgMiBdCiAgTzBPMDBPbyA9ICdbQ09MT1IgZ29sZF0lc1svQ09MT1JdICglcyknICUgKCBpMUlpaTFpMUkgLCBPME9vMDAwb29PMDAgKQogIE9Pb29vME8wMG8gPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBsYWJlbCA9IE8wTzAwT28gLCBpY29uSW1hZ2UgPSAnJyApCiAgT28wME9PT09PID0gJ3swfT9hY3Rpb249dGVtYTImaWR0ZW09ezF9JyAuIGZvcm1hdCAoIE9vICwgb09Pb28wME8wMG8gKQogIG9PT29Pb29PbyA9IFRydWUKICBpMWlJSUlpMWkgLiBhcHBlbmQgKCAoIE9vMDBPT09PTyAsIE9Pb29vME8wMG8gLCBvT09vT29vT28gKSApCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBvME8gLCBpMWlJSUlpMWkgLCBsZW4gKCBpMWlJSUlpMWkgKSApCiB4Ym1jcGx1Z2luIC4gZW5kT2ZEaXJlY3RvcnkgKCBvME8gKQogaWYgNzMgLSA3MzogSTFpMWlJMWkgKiBpMTFpSWlpSWlpICUgSUkgLiBJMWkxaUkxaQpkZWYgT09PT28wICggaWR0ZW0gKSA6CiBvTzBPbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBvT09vbzBPbyA9IG9PME9vIC4gY3Vyc29yICggKQogb09Pb28wT28gLiBleGVjdXRlICggIlNFTEVDVCAqIEZST00gcGVsaXMgSU5ORVIgSk9JTiBwZWx0ZW0gT04gcGVsaXMuSUQgPSBwZWx0ZW0uaWRwZWwgV0hFUkUgcGVsdGVtLmlkdGVtPT8gT1JERVIgQlkgcGVsaXMuZ3J1cG8sIHBlbGlzLmhkLCBwZWxpcy5pZDsiICwgKCBpZHRlbSAsICkgKQogT09PTzBPT29PME8wID0gb09Pb28wT28gLiBmZXRjaGFsbCAoICkKIG9PME9vIC4gY2xvc2UgKCApCiBPMDAwT09PT09vICggT09PTzBPT29PME8wICkKIGlmIDQ5IC0gNDk6IG9vTzBPTzAwMG8gJSBJaWkxSTEgLiBPMG9vME9PMCArIElJIC8gSTExaTExSWkKZGVmIE8wb09Pb09vb29vTyAoICkgOgogb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogb09Pb28wT28gPSBvTzBPbyAuIGN1cnNvciAoICkKIG9PT29vME9vIC4gZXhlY3V0ZSAoICJTZWxlY3QgYW5ubyxjb3VudChpZCkgZnJvbSBwZWxpcyBncm91cCBieSBhbm5vIG9yZGVyIGJ5IGFubm8iICkKIE9PT08wT09vTzBPMCA9IG9PT29vME9vIC4gZmV0Y2hhbGwgKCApCiBvTzBPbyAuIGNsb3NlICggKQogaTFpSUlJaTFpID0gWyBdCiBmb3IgaWlJSTFpMSBpbiBPT09PME9Pb08wTzAgOgogIG9vb09vME9PT29vMCA9IGlpSUkxaTEgWyAwIF0KICBPME9vMDAwb29PMDAgPSBpaUlJMWkxIFsgMSBdCiAgTzBPMDBPbyA9ICdbQ09MT1IgZ29sZF0lc1svQ09MT1JdICglcyknICUgKCBvb29PbzBPT09vbzAgLCBPME9vMDAwb29PMDAgKQogIE9Pb29vME8wMG8gPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBsYWJlbCA9IE8wTzAwT28gLCBpY29uSW1hZ2UgPSAnJyApCiAgT28wME9PT09PID0gJ3swfT9hY3Rpb249YW5ubzImYW5ubz17MX0nIC4gZm9ybWF0ICggT28gLCBvb29PbzBPT09vbzAgKQogIG9PT29Pb29PbyA9IFRydWUKICBpMWlJSUlpMWkgLiBhcHBlbmQgKCAoIE9vMDBPT09PTyAsIE9Pb29vME8wMG8gLCBvT09vT29vT28gKSApCiB0cnkgOgogIHhibWNwbHVnaW4gLiBzZXRDb250ZW50ICggbzBPICwgImZpbGVzIiApCiAgeGJtYyAuIGV4ZWN1dGVidWlsdGluICggIkNvbnRhaW5lci5TZXRWaWV3TW9kZSg1MDIpIiApCiBleGNlcHQgOiBwYXNzCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBvME8gLCBpMWlJSUlpMWkgLCBsZW4gKCBpMWlJSUlpMWkgKSApCiB4Ym1jcGx1Z2luIC4gZW5kT2ZEaXJlY3RvcnkgKCBvME8gKQogaWYgNTEgLSA1MTogaWlpMUkxSSAvIE8wb28wT08wIC4gb29PMDBvT29vICogT28wb29PMG9vMG9PICsgTzAwb09vT29PMG8wTyAqIG9vb09PT09PCmRlZiBPT09vT28gKCBhbm5vICkgOgogb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogb09Pb28wT28gPSBvTzBPbyAuIGN1cnNvciAoICkKIG9PT29vME9vIC4gZXhlY3V0ZSAoICJTZWxlY3QgKiBmcm9tIHBlbGlzIHdoZXJlIGFubm8gPSA/IG9yZGVyIGJ5IGdydXBvLCBoZDsiICwgKCBhbm5vICwgKSApCiBPT09PME9Pb08wTzAgPSBvT09vbzBPbyAuIGZldGNoYWxsICggKQogb08wT28gLiBjbG9zZSAoICkKIE8wMDBPT09PT28gKCBPT09PME9Pb08wTzAgKQogaWYgNTEgLSA1MTogaTFpSUlpMSAvIE9PME8wTyAlIGlpaTFJMUkgKiBJMTFpMTFJaSAlIElpaUlJSTExMWlpCmRlZiBvT29vb09PTyAoICkgOgogb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogb09Pb28wT28gPSBvTzBPbyAuIGN1cnNvciAoICkKIG9PT29vME9vIC4gZXhlY3V0ZSAoICJTRUxFQ1QgZ3J1cG9zLmlkLCBncnVwbywgQ291bnQoaWRncnUpIEZST00gZ3J1cG9zIElOTkVSIEpPSU4gcGVsZ3J1IE9OIGdydXBvcy5pZCA9IHBlbGdydS5pZGdydSBHUk9VUCBCWSBncnVwb3MuaWQgaGF2aW5nIGNvdW50KGdydXBvcy5pZCk+MSBPUkRFUiBCWSBncnVwbzIiICkKIE9PT08wT09vTzBPMCA9IG9PT29vME9vIC4gZmV0Y2hhbGwgKCApCiBvTzBPbyAuIGNsb3NlICggKQogaTFpSUlJaTFpID0gWyBdCiBmb3IgaWlJSTFpMSBpbiBPT09PME9Pb08wTzAgOgogIG9PT29vMDBPMDBvID0gaWlJSTFpMSBbIDAgXQogIGkxSWlpMWkxSSA9IGlpSUkxaTEgWyAxIF0KICBPME9vMDAwb29PMDAgPSBpaUlJMWkxIFsgMiBdCiAgTzBPMDBPbyA9ICdbQ09MT1IgZ29sZF0lc1svQ09MT1JdICglcyknICUgKCBpMUlpaTFpMUkgLCBPME9vMDAwb29PMDAgKQogIE9Pb29vME8wMG8gPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBsYWJlbCA9IE8wTzAwT28gLCBpY29uSW1hZ2UgPSAnJyApCiAgT28wME9PT09PID0gJ3swfT9hY3Rpb249Z3J1cG8yJmlkZ3J1PXsxfScgLiBmb3JtYXQgKCBPbyAsIG9PT29vMDBPMDBvICkKICBvT09vT29vT28gPSBUcnVlCiAgaTFpSUlJaTFpIC4gYXBwZW5kICggKCBPbzAwT09PT08gLCBPT29vbzBPMDBvICwgb09Pb09vb09vICkgKQogeGJtY3BsdWdpbiAuIGFkZERpcmVjdG9yeUl0ZW1zICggbzBPICwgaTFpSUlJaTFpICwgbGVuICggaTFpSUlJaTFpICkgKQogeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggbzBPICkKIGlmIDUyIC0gNTI6IGlpaWlpIC0gaTFpSUlpMQpkZWYgbzBPMG8wICggKSA6CiBvTzBPbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBvT09vbzBPbyA9IG9PME9vIC4gY3Vyc29yICggKQogb09Pb28wT28gPSBvTzBPbyAuIGN1cnNvciAoICkKIGlmIDM3IC0gMzc6IEkxaTFpSTFpICogTzBPT28gJSBpMTFpSWlpSWlpICUgaTFpSUlpMSArIG9PCiBpZiA3OCAtIDc4OiBJMWkxaUkxaSAlIElJIC8gSWlpSUlpaUkxMSAtIE9PME8wTwogaWYgNjkgLSA2OTogSWlpSUlJMTExaWkKIG9PT29vME9vIC4gZXhlY3V0ZSAoICJTRUxFQ1QgcGFpcywgQ291bnQoaWQpIEZST00gcGVsaXMgZ3JvdXAgYnkgcGFpcyBvcmRlciBieSByZXBlLHBhaXM7IiApCiBPT09PME9Pb08wTzAgPSBvT09vbzBPbyAuIGZldGNoYWxsICggKQogb08wT28gLiBjbG9zZSAoICkKIGkxaUlJSWkxaSA9IFsgXQogZm9yIGlpSUkxaTEgaW4gT09PTzBPT29PME8wIDoKICBpaTFJMSA9IGlpSUkxaTEgWyAwIF0KICBPME9vMDAwb29PMDAgPSBpaUlJMWkxIFsgMSBdCiAgT29vb29PT29vMCA9IGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggaWkxSTEgLiBlbmNvZGUgKCAndXRmLTgnICkgKQogIGlmIGlpMUkxIC4gZW5jb2RlICggJ3V0Zi04JyApID09ICdFc3Bhw7FhJyA6CiAgIGlpMUkxID0gJ0VTUEHDkUEnIC4gZGVjb2RlICggJ3V0Zi04JyApCiAgTzBPMDBPbyA9ICdbQ09MT1IgZ29sZF0lc1svQ09MT1JdICglcyknICUgKCBpaTFJMSAsIE8wT28wMDBvb08wMCApCiAgT09vb28wTzAwbyA9IHhibWNndWkgLiBMaXN0SXRlbSAoIGxhYmVsID0gTzBPMDBPbyAsIGljb25JbWFnZSA9ICcnICkKICBPbzAwT09PT08gPSAnezB9P2FjdGlvbj1wYWlzMiZwYWlzPXsxfScgLiBmb3JtYXQgKCBPbyAsIE9vb29vT09vbzAgKQogIG9PT29Pb29PbyA9IFRydWUKICBpMWlJSUlpMWkgLiBhcHBlbmQgKCAoIE9vMDBPT09PTyAsIE9Pb29vME8wMG8gLCBvT09vT29vT28gKSApCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBvME8gLCBpMWlJSUlpMWkgLCBsZW4gKCBpMWlJSUlpMWkgKSApCiB4Ym1jcGx1Z2luIC4gZW5kT2ZEaXJlY3RvcnkgKCBvME8gKQogaWYgMzUgLSAzNTogTzBPT28gJSBvb08wMG9Pb28gLSBJSQpkZWYgaWkxaWlpMWkgKCApIDoKIElpaTFJMTExMWlpID0gaWkxMWkgKCApCiBpZiBJaWkxSTExMTFpaSA6CiAgb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogIG9PT29vME9vID0gb08wT28gLiBjdXJzb3IgKCApCiAgSWlpMUkxMTExaWkgPSBPTzBvICggdW5pY29kZSAoIElpaTFJMTExMWlpIC4gZGVjb2RlICggJ3V0Zi04JyApICkgKSAuIHVwcGVyICggKQogIElpaTFJMTExMWlpID0gJyUnICsgSWlpMUkxMTExaWkgKyAnJScKICBvT09vbzBPbyAuIGV4ZWN1dGUgKCAiU0VMRUNUIGdydXBvcy5pZCwgZ3J1cG8sIENvdW50KGlkZ3J1KSBGUk9NIGdydXBvcyBJTk5FUiBKT0lOIHBlbGdydSBPTiBncnVwb3MuaWQgPSBwZWxncnUuaWRncnUgV0hFUkUgZ3J1cG8yIGxpa2UgPyBHUk9VUCBCWSBncnVwb3MuaWQgaGF2aW5nIGNvdW50KGdydXBvcy5pZCk+MSBPUkRFUiBCWSBncnVwbzIiICwgKCBJaWkxSTExMTFpaSAsICkgKQogIE9PT08wT09vTzBPMCA9IG9PT29vME9vIC4gZmV0Y2hhbGwgKCApCiAgb08wT28gLiBjbG9zZSAoICkKICBpMWlJSUlpMWkgPSBbIF0KICBmb3IgaWlJSTFpMSBpbiBPT09PME9Pb08wTzAgOgogICBvT09vbzAwTzAwbyA9IGlpSUkxaTEgWyAwIF0KICAgaTFJaWkxaTFJID0gaWlJSTFpMSBbIDEgXQogICBPME9vMDAwb29PMDAgPSBpaUlJMWkxIFsgMiBdCiAgIE8wTzAwT28gPSAnW0NPTE9SIGdvbGRdJXNbL0NPTE9SXSAoJXMpJyAlICggaTFJaWkxaTFJICwgTzBPbzAwMG9vTzAwICkKICAgT09vb28wTzAwbyA9IHhibWNndWkgLiBMaXN0SXRlbSAoIGxhYmVsID0gTzBPMDBPbyAsIGljb25JbWFnZSA9ICcnICkKICAgT28wME9PT09PID0gJ3swfT9hY3Rpb249Z3J1cG8yJmlkZ3J1PXsxfScgLiBmb3JtYXQgKCBPbyAsIG9PT29vMDBPMDBvICkKICAgb09Pb09vb09vID0gVHJ1ZQogICBpMWlJSUlpMWkgLiBhcHBlbmQgKCAoIE9vMDBPT09PTyAsIE9Pb29vME8wMG8gLCBvT09vT29vT28gKSApCiAgeGJtY3BsdWdpbiAuIGFkZERpcmVjdG9yeUl0ZW1zICggbzBPICwgaTFpSUlJaTFpICwgbGVuICggaTFpSUlJaTFpICkgKQogIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIG8wTyApCiAgaWYgNzIgLSA3Mjogb29PME9PMDAwbyArIGlpMUkgKyBPbzBvb08wb28wb08KZGVmIE9PTyAoIGlkZ3J1ICkgOgogb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogb09Pb28wT28gPSBvTzBPbyAuIGN1cnNvciAoICkKIG9PT29vME9vIC4gZXhlY3V0ZSAoICJTRUxFQ1QgKiBGUk9NIHBlbGlzIElOTkVSIEpPSU4gcGVsZ3J1IE9OIHBlbGlzLklEID0gcGVsZ3J1LmlkcGVsIFdIRVJFIHBlbGdydS5pZGdydT0/IE9SREVSIEJZIHBlbGlzLmFubm8sIHBlbGlzLmdydXBvLCBwZWxpcy5oZCwgcGVsaXMuaWQ7IiAsICggaWRncnUgLCApICkKIE9PT08wT09vTzBPMCA9IG9PT29vME9vIC4gZmV0Y2hhbGwgKCApCiBvTzBPbyAuIGNsb3NlICggKQogTzAwME9PT09PbyAoIE9PT08wT09vTzBPMCAsIFRydWUgKQogaWYgMjUgLSAyNTogSUkgLSBPMDBvT29Pb08wbzBPIC4gT08wTzBPICUgaTExaUlpaUlpaSAlIEkxaTFpSTFpCmRlZiBvME9vMG9PMG9PTzAwICggcGFpcyApIDoKIHBhaXMgPSBiYXNlNjQgLiBiNjRkZWNvZGUgKCBwYWlzICkgLiBkZWNvZGUgKCAndXRmLTgnICkKIG9PME9vID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBPbzBPICkKIG9PT29vME9vID0gb08wT28gLiBjdXJzb3IgKCApCiBvT09vbzBPbyAuIGV4ZWN1dGUgKCAiU0VMRUNUICogRlJPTSBwZWxpcyBXSEVSRSBwYWlzPT8gT1JERVIgQlkgcGVsaXMuYW5ubywgcGVsaXMuZ3J1cG8sIHBlbGlzLmhkLCBwZWxpcy5pZDsiICwgKCBwYWlzICwgKSApCiBPT09PME9Pb08wTzAgPSBvT09vbzBPbyAuIGZldGNoYWxsICggKQogb08wT28gLiBjbG9zZSAoICkKIE8wMDBPT09PT28gKCBPT09PME9Pb08wTzAgLCBUcnVlICkKIGlmIDkyIC0gOTI6IGlpaWlpICogSWlpSUlJMTExaWkKZGVmIG8wMDAwb08gKCApIDoKIElpaTFJMTExMWlpID0gaWkxMWkgKCApCiBpZiBJaWkxSTExMTFpaSA6CiAgb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogIG9PT29vME9vID0gb08wT28gLiBjdXJzb3IgKCApCiAgSWlpMUkxMTExaWkgPSBPTzBvICggdW5pY29kZSAoIElpaTFJMTExMWlpIC4gZGVjb2RlICggJ3V0Zi04JyApICkgKSAuIHVwcGVyICggKQogIElpaTFJMTExMWlpID0gJyUnICsgSWlpMUkxMTExaWkgKyAnJScKICBvT09vbzBPbyAuIGV4ZWN1dGUgKCAiU2VsZWN0ICogZnJvbSBwZWxpcyB3aGVyZSBncnVwbyBsaWtlID8gb3JkZXIgYnkgZ3J1cG8iICwgKCBJaWkxSTExMTFpaSAsICkgKQogIE9PT08wT09vTzBPMCA9IG9PT29vME9vIC4gZmV0Y2hhbGwgKCApCiAgb08wT28gLiBjbG9zZSAoICkKICBPMDAwT09PT09vICggT09PTzBPT29PME8wICkKICBpZiAxMSAtIDExOiBpMWlJSWkxIC8gTzBvbzBPTzAgLSBvb29PT09PTyAqIGlpaWlpICsgaWlpaWkgLiBPMG9vME9PMApkZWYgaTFJMWkxMTFJaSAoICkgOgogSWlpMUkxMTExaWkgPSBpaTExaSAoICkKIGlmIElpaTFJMTExMWlpIDoKICBvTzBPbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiAgb09Pb28wT28gPSBvTzBPbyAuIGN1cnNvciAoICkKICBJaWkxSTExMTFpaSA9IE9PMG8gKCB1bmljb2RlICggSWlpMUkxMTExaWkgLiBkZWNvZGUgKCAndXRmLTgnICkgKSApIC4gdXBwZXIgKCApCiAgSWlpMUkxMTExaWkgPSAnJScgKyBJaWkxSTExMTFpaSArICclJwogIG9PT29vME9vIC4gZXhlY3V0ZSAoICJTZWxlY3QgZGlyZWN0b3IsIGNvdW50KGlkKSBmcm9tIHBlbGlzIGdyb3VwIGJ5IGRpcmVjdG9yIGhhdmluZyBkaXJlY3RvcjIgbGlrZSA/IG9yZGVyIGJ5IGRpcmVjdG9yMiIgLCAoIElpaTFJMTExMWlpICwgKSApCiAgT09PTzBPT29PME8wID0gb09Pb28wT28gLiBmZXRjaGFsbCAoICkKICBvTzBPbyAuIGNsb3NlICggKQogIGkxaUlJSWkxaSA9IFsgXQogIGZvciBpaUlJMWkxIGluIE9PT08wT09vTzBPMCA6CiAgIE9PSTFpSTFpaTFJSSA9IGlpSUkxaTEgWyAwIF0gLiBlbmNvZGUgKCAndXRmLTgnICkKICAgTzBPbzAwMG9vTzAwID0gaWlJSTFpMSBbIDEgXQogICBPME8wME9vID0gJ1tDT0xPUiBnb2xkXSVzWy9DT0xPUl0gKCVzKScgJSAoIE9PSTFpSTFpaTFJSSAsIE8wT28wMDBvb08wMCApCiAgIE9Pb29vME8wMG8gPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBsYWJlbCA9IE8wTzAwT28gLCBpY29uSW1hZ2UgPSAnJyApCiAgIE9vMDBPT09PTyA9ICd7MH0/YWN0aW9uPWJ1c2RpcjImZGlyZWN0b3I9ezF9JyAuIGZvcm1hdCAoIE9vICwgT09JMWlJMWlpMUlJICkKICAgb09Pb09vb09vID0gVHJ1ZQogICBpMWlJSUlpMWkgLiBhcHBlbmQgKCAoIE9vMDBPT09PTyAsIE9Pb29vME8wMG8gLCBvT09vT29vT28gKSApCiAgeGJtY3BsdWdpbiAuIGFkZERpcmVjdG9yeUl0ZW1zICggbzBPICwgaTFpSUlJaTFpICwgbGVuICggaTFpSUlJaTFpICkgKQogIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIG8wTyApCiAgaWYgNjcgLSA2NzogSTExaTExSWkgLiBpaTFJCmRlZiBpMWkxaUkxaWlpSSAoIGRpcmVjdG9yICkgOgogb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogb09Pb28wT28gPSBvTzBPbyAuIGN1cnNvciAoICkKIG9PT29vME9vIC4gZXhlY3V0ZSAoICJTZWxlY3QgKiBmcm9tIHBlbGlzIHdoZXJlIGRpcmVjdG9yID0gPyBvcmRlciBieSBhbm5vLCBncnVwbywgaWQiICwgKCBkaXJlY3RvciAuIGRlY29kZSAoICd1dGYtOCcgKSAsICkgKQogT09PTzBPT29PME8wID0gb09Pb28wT28gLiBmZXRjaGFsbCAoICkKIG9PME9vIC4gY2xvc2UgKCApCiBPMDAwT09PT09vICggT09PTzBPT29PME8wICwgVHJ1ZSApCiBpZiA1MSAtIDUxOiBJMTFpMTFJaSAlIElpaUlJSTExMWlpIC4gSUkgLyBPTzBPME8gLyBPME9PbyAuIElJCmRlZiBJSUlpaTExICggKSA6CiBJaWkxSTExMTFpaSA9IGlpMTFpICggKQogaWYgSWlpMUkxMTExaWkgOgogIG9PME9vID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBPbzBPICkKICBvT09vbzBPbyA9IG9PME9vIC4gY3Vyc29yICggKQogIElpaTFJMTExMWlpID0gT08wbyAoIHVuaWNvZGUgKCBJaWkxSTExMTFpaSAuIGRlY29kZSAoICd1dGYtOCcgKSApICkgLiB1cHBlciAoICkKICBJaWkxSTExMTFpaSA9ICclJyArIElpaTFJMTExMWlpICsgJyUnCiAgb09Pb28wT28gLiBleGVjdXRlICggIlNFTEVDVCBhY3RvcmVzLmlkLCBhY3RvciwgQ291bnQoaWRhY3QpIEZST00gYWN0b3JlcyBJTk5FUiBKT0lOIHBlbGFjdCBPTiBhY3RvcmVzLmlkID0gcGVsYWN0LmlkYWN0IEdST1VQIEJZIGFjdG9yZXMuYWN0b3IgaGF2aW5nIGFjdG9yMiBsaWtlID8gT1JERVIgQlkgYWN0b3IyIiAsICggSWlpMUkxMTExaWkgLCApICkKICBPT09PME9Pb08wTzAgPSBvT09vbzBPbyAuIGZldGNoYWxsICggKQogIG9PME9vIC4gY2xvc2UgKCApCiAgaTFpSUlJaTFpID0gWyBdCiAgZm9yIGlpSUkxaTEgaW4gT09PTzBPT29PME8wIDoKICAgaWlJaUlJSWlpSSA9IGlpSUkxaTEgWyAwIF0KICAgaWlJMUlJSWkgPSBpaUlJMWkxIFsgMSBdCiAgIE8wT28wMDBvb08wMCA9IGlpSUkxaTEgWyAyIF0KICAgTzBPMDBPbyA9ICdbQ09MT1IgZ29sZF0lc1svQ09MT1JdICglcyknICUgKCBpaUkxSUlJaSAsIE8wT28wMDBvb08wMCApCiAgIE9Pb29vME8wMG8gPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBsYWJlbCA9IE8wTzAwT28gLCBpY29uSW1hZ2UgPSAnJyApCiAgIE9vMDBPT09PTyA9ICd7MH0/YWN0aW9uPWJ1c2FjdDImaWRhY3Q9ezF9JyAuIGZvcm1hdCAoIE9vICwgaWlJaUlJSWlpSSApCiAgIG9PT29Pb29PbyA9IFRydWUKICAgaTFpSUlJaTFpIC4gYXBwZW5kICggKCBPbzAwT09PT08gLCBPT29vbzBPMDBvICwgb09Pb09vb09vICkgKQogIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIG8wTyAsIGkxaUlJSWkxaSAsIGxlbiAoIGkxaUlJSWkxaSApICkKICB4Ym1jcGx1Z2luIC4gZW5kT2ZEaXJlY3RvcnkgKCBvME8gKQogIGlmIDQ3IC0gNDc6IGlpaTFJMUkgJSBPME9PbyAlIGkxMWlJaWlJaWkgLSBJaWkxSTEgKyBpMWlJSWkxCmRlZiBvb08wMDBPTzBPMDBPICggaWRhY3QgKSA6CiBvTzBPbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBvT09vbzBPbyA9IG9PME9vIC4gY3Vyc29yICggKQogb09Pb28wT28gLiBleGVjdXRlICggIlNFTEVDVCAqIEZST00gcGVsaXMgSU5ORVIgSk9JTiBwZWxhY3QgT04gcGVsaXMuSUQgPSBwZWxhY3QuaWRwZWwgV0hFUkUgcGVsYWN0LmlkYWN0PT8gT1JERVIgQlkgcGVsaXMuYW5ubywgcGVsaXMuZ3J1cG8sIHBlbGlzLmlkOyIgLCAoIGlkYWN0ICwgKSApCiBPT09PME9Pb08wTzAgPSBvT09vbzBPbyAuIGZldGNoYWxsICggKQogb08wT28gLiBjbG9zZSAoICkKIE8wMDBPT09PT28gKCBPT09PME9Pb08wTzAgLCBUcnVlICkKIGlmIDY5IC0gNjk6IG9vTzAwb09vbyAtIGlpaWlpICsgT28wb29PMG9vMG9PIC0gTzBPT28KZGVmIGlpICggKSA6CiBpbXBvcnQgZGF0ZXRpbWUKIG9vb09vME9PT29vMCA9IGRhdGV0aW1lIC4gZGF0ZXRpbWUgLiBub3cgKCApIC4geWVhcgogb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogb09Pb28wT28gPSBvTzBPbyAuIGN1cnNvciAoICkKIG9PT29vME9vIC4gZXhlY3V0ZSAoICJTRUxFQ1QgKiBGUk9NIHBlbGlzIHdoZXJlIGdiIGlzIG5vdCBudWxsIGFuZCBhbm5vPj0/IG9yZGVyIGJ5IGdiLCBIRCBMSU1JVCgxMDApOyIgLCAoIG9vb09vME9PT29vMCAtIDEgLCApICkKIE9PT08wT09vTzBPMCA9IG9PT29vME9vIC4gZmV0Y2hhbGwgKCApCiBvTzBPbyAuIGNsb3NlICggKQogTzAwME9PT09PbyAoIE9PT08wT09vTzBPMCAsIEZhbHNlICkKIGlmIDY4IC0gNjg6IElpaUlJaWlJMTEgLSBJMTFpMTFJaSAvIElpaUlJSTExMWlpIC8gTzBPT28KZGVmIEkxMWlpaWkgKCApIDoKIGltcG9ydCBkYXRldGltZQogb29vT28wT09Pb28wID0gZGF0ZXRpbWUgLiBkYXRldGltZSAuIG5vdyAoICkgLiB5ZWFyCiBvTzBPbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBvT09vbzBPbyA9IG9PME9vIC4gY3Vyc29yICggKQogb09Pb28wT28gLiBleGVjdXRlICggIlNFTEVDVCAqIEZST00gcGVsaXMgd2hlcmUgZ2IgaXMgbm90IG51bGwgYW5kIGFubm88PyBvcmRlciBieSBnYiwgSEQgTElNSVQoMTAwKTsiICwgKCBvb29PbzBPT09vbzAgLSAxICwgKSApCiBPT09PME9Pb08wTzAgPSBvT09vbzBPbyAuIGZldGNoYWxsICggKQogb08wT28gLiBjbG9zZSAoICkKIE8wMDBPT09PT28gKCBPT09PME9Pb08wTzAgLCBGYWxzZSApCiBpZiA2MCAtIDYwOiBPME9PbyAuIGlpMUkgKyBvb29PT09PTyAvIE9vMG9vTzBvbzBvTyAuIG9vTzBPTzAwMG8KZGVmIE9PMG9vICggKSA6CiBvTzBPbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBvT09vbzBPbyA9IG9PME9vIC4gY3Vyc29yICggKQogb09Pb28wT28gLiBleGVjdXRlICggIlNFTEVDVCAqIEZST00gcGVsaXMgb3JkZXIgYnkgdnRhIERFU0MgTElNSVQoMTAwKTsiICkKIE9PT08wT09vTzBPMCA9IG9PT29vME9vIC4gZmV0Y2hhbGwgKCApCiBvTzBPbyAuIGNsb3NlICggKQogTzAwME9PT09PbyAoIE9PT08wT09vTzBPMCAsIEZhbHNlICkKIGlmIDE1IC0gMTU6IEkxMWkxMUlpIC8gSWlpSUlJMTExaWkgLiBJaWlJSUkxMTFpaSAqIElJCmRlZiBpMTExaUlpSTFJMWkxICggKSA6CiBvTzBPbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBvT09vbzBPbyA9IG9PME9vIC4gY3Vyc29yICggKQogb09Pb28wT28gLiBleGVjdXRlICggIlNFTEVDVCAqIEZST00gcGVsaXMgd2hlcmUgSEQ9J1MnIG9yZGVyIGJ5IGlkIERFU0MgTElNSVQoMTAwKTsiICkKIE9PT08wT09vTzBPMCA9IG9PT29vME9vIC4gZmV0Y2hhbGwgKCApCiBvTzBPbyAuIGNsb3NlICggKQogTzAwME9PT09PbyAoIE9PT08wT09vTzBPMCAsIEZhbHNlICkKIGlmIDgxIC0gODE6IGkxaUlJaTEgLSBPTzBPME8gLSBpaTFJIC8gSWlpSUlJMTExaWkgLSBJaWkxSTEgKiBPME9PbwpkZWYgaUkxaTExSUkxaSAoICkgOgogb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogb09Pb28wT28gPSBvTzBPbyAuIGN1cnNvciAoICkKIG9PT29vME9vIC4gZXhlY3V0ZSAoICJTZWxlY3QgaWQsZ2VuZXJvIGZyb20gZ2VuZXJvcyBvcmRlciBieSBnZW5lcm8yOyIgKQogT09PTzBPT29PME8wID0gb09Pb28wT28gLiBmZXRjaGFsbCAoICkKIG9PME9vIC4gY2xvc2UgKCApCiBpMWlJSUlpMWkgPSBbIF0KIE8wTzAwT28gPSAnW0NPTE9SIGdvbGRdU2VsZWNjaW9uYSB1biBnw6luZXJvWy9DT0xPUl0nCiBPT29vbzBPMDBvID0geGJtY2d1aSAuIExpc3RJdGVtICggbGFiZWwgPSBPME8wME9vICwgaWNvbkltYWdlID0gJycgKQogb09Pb09vb09vID0gRmFsc2UKIGkxaUlJSWkxaSAuIGFwcGVuZCAoICggJycgLCBPT29vbzBPMDBvICwgb09Pb09vb09vICkgKQogZm9yIGlpSUkxaTEgaW4gT09PTzBPT29PME8wIDoKICBvT09vbzAwTzAwbyA9IGlpSUkxaTEgWyAwIF0KICBpMUlpaTFpMUkgPSBpaUlJMWkxIFsgMSBdCiAgT09vb28wTzAwbyA9IHhibWNndWkgLiBMaXN0SXRlbSAoIGxhYmVsID0gaTFJaWkxaTFJICwgaWNvbkltYWdlID0gJycgKQogIE9vMDBPT09PTyA9ICd7MH0/YWN0aW9uPXBlbHJlYzImaWRnZW49ezF9JyAuIGZvcm1hdCAoIE9vICwgb09Pb28wME8wMG8gKQogIG9PT29Pb29PbyA9IFRydWUKICBpMWlJSUlpMWkgLiBhcHBlbmQgKCAoIE9vMDBPT09PTyAsIE9Pb29vME8wMG8gLCBvT09vT29vT28gKSApCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBvME8gLCBpMWlJSUlpMWkgLCBsZW4gKCBpMWlJSUlpMWkgKSApCiB4Ym1jcGx1Z2luIC4gZW5kT2ZEaXJlY3RvcnkgKCBvME8gKQogaWYgOTYgLSA5NjogSWlpSUlJMTExaWkKZGVmIG9Pb09vME8wT09Pb08gKCBpZGdlbiApIDoKIGlJMTFJSUlpaWkxSUkgPSBzcWxpdGUzIC4gY29ubmVjdCAoIElpSSApCiBpMUlJMWkgPSBpSTExSUlJaWlpMUlJIC4gY3Vyc29yICggKQogaTFJSTFpIC4gZXhlY3V0ZSAoICdDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAidnRhcyIgKGBpZGAgSU5URUdFUiBOT1QgTlVMTCwgYGZhZmZpZGAgSU5URUdFUiBOT1QgTlVMTCwgUFJJTUFSWSBLRVkoYGlkYCkpOycgKQogaWYgODMgLSA4MzogTzBvbzBPTzAgLSBvTyAvIE8wT09vIC8gSWlpSUlJMTExaWkgKyBJSSAtIElpaTFJMQogb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogb09Pb28wT28gPSBvTzBPbyAuIGN1cnNvciAoICkKIG9PT29vME9vIC4gZXhlY3V0ZSAoICdDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAicmVrbyIgKGBpZGAgSU5URUdFUiBOT1QgTlVMTCwgYGlkcGVsYCBJTlRFR0VSIE5PVCBOVUxMLCBQUklNQVJZIEtFWShgaWRgKSk7JyApCiBvT09vbzBPbyAuIGV4ZWN1dGUgKCAnZGVsZXRlIGZyb20gcmVrbzsnICkKIG9PME9vIC4gY29tbWl0ICggKQogb09Pb28wT28gLiBleGVjdXRlICggIlNFTEVDVCBwZWxpcy5pZCxmYWZmaWQsZ3J1cG8gRlJPTSBwZWxpcyBJTk5FUiBKT0lOIHBlbGdlbiBPTiBwZWxpcy5JRCA9IHBlbGdlbi5pZHBlbCBXSEVSRSBwZWxpcy52YWxvcmFjaW9uPjYuNSBhbmQgcGVsZ2VuLmlkZ2VuPT8gT1JERVIgQlkgcGVsaXMuaWQ7IiAsICggaWRnZW4gLCApICkKIE9PT08wT09vTzBPMCA9IG9PT29vME9vIC4gZmV0Y2hhbGwgKCApCiBJMTFJMWkxaUlJSTFJID0gWyBdCiBvME9PMDBvTyA9IFsgXQogaUkgPSBsZW4gKCBPT09PME9Pb08wTzAgKSAtIDEKIGZyb20gcmFuZG9tIGltcG9ydCByYW5kaW50CiB3aGlsZSAxID09IDEgOgogIEkxaTExID0gcmFuZGludCAoIDAgLCBpSSApCiAgaWYgSTFpMTEgbm90IGluIG8wT08wMG9PIDoKICAgbzBPTzAwb08gLiBhcHBlbmQgKCBJMWkxMSApCiAgIGlpSUkxaTEgPSBPT09PME9Pb08wTzAgWyBJMWkxMSBdCiAgIE9vb0lpSUlJSTFpMTFJID0gaWlJSTFpMSBbIDEgXQogICBpMUlJMWkgLiBleGVjdXRlICggIlNFTEVDVCBpZCBmcm9tIHZ0YXMgd2hlcmUgZmFmZmlkPT87IiAsICggT29vSWlJSUlJMWkxMUkgLCApICkKICAgT09PaUlJMSA9IGkxSUkxaSAuIGZldGNob25lICggKQogICBpZiBub3QgT09PaUlJMSA6CiAgICBpMUlJMWkgLiBleGVjdXRlICggIklOU0VSVCBJTlRPIHZ0YXMoZmFmZmlkKSBWQUxVRVMgKD8pOyIgLCAoIE9vb0lpSUlJSTFpMTFJICwgKSApCiAgICBpSTExSUlJaWlpMUlJIC4gY29tbWl0ICggKQogICAgT09vID0geyB9CiAgICBPT28gWyAnZ3J1cG8nIF0gPSBpaUlJMWkxIFsgMiBdCiAgICBPT28gWyAnaWQnIF0gPSBpaUlJMWkxIFsgMCBdCiAgICBJMTFJMWkxaUlJSTFJIC4gYXBwZW5kICggT09vICkKICAgIGlmIGxlbiAoIEkxMUkxaTFpSUlJMUkgKSA9PSAxMCA6CiAgICAgYnJlYWsKICAgaWYgbGVuICggbzBPTzAwb08gKSA+IGlJIDoKICAgIGkxSUkxaSAuIGV4ZWN1dGUgKCAiREVMRVRFIEZST00gdnRhczsiICkKICAgIGlJMTFJSUlpaWkxSUkgLiBjb21taXQgKCApCiAgICBicmVhawogaUkxMUlJSWlpaTFJSSAuIGNsb3NlICggKQogSTExSTFpMWlJSUkxSSAuIHNvcnQgKCBrZXkgPSBsYW1iZGEgSUlpaTExSWkxaTFJIDogSUlpaTExSWkxaTFJIFsgJ2dydXBvJyBdICkKIG9vb29vT29vMG9vbyA9IFsgXQogZm9yIE9PbyBpbiBJMTFJMWkxaUlJSTFJIDoKICBvT09vbzBPbyAuIGV4ZWN1dGUgKCAnSU5TRVJUIElOVE8gcmVrbyhpZHBlbCkgVkFMVUVTICg/KTsnICwgKCBPT28gWyAnaWQnIF0gLCApICkKICBvb29vb09vbzBvb28gLiBhcHBlbmQgKCBzdHIgKCBPT28gWyAnaWQnIF0gKSApCiBvb29vb09vbzBvb28gPSAnXyVzJyAlICcuJyAuIGpvaW4gKCBvb29vb09vbzBvb28gKQogb09Pb28wT28gLiBleGVjdXRlICggIlNFTEVDVCAqIEZST00gcGVsaXMgSU5ORVIgSk9JTiByZWtvIE9OIHBlbGlzLklEID0gcmVrby5pZHBlbCBPUkRFUiBCWSByZWtvLmlkOyIgKQogT09PTzBPT29PME8wID0gb09Pb28wT28gLiBmZXRjaGFsbCAoICkKIG9PT29vME9vIC4gZXhlY3V0ZSAoICdkZWxldGUgZnJvbSByZWtvOycgKQogb08wT28gLiBjb21taXQgKCApCiBvTzBPbyAuIGNsb3NlICggKQogTzAwME9PT09PbyAoIE9PT08wT09vTzBPMCAsIEZhbHNlICwgb29vb29Pb28wb29vICkKIGlmIDc2IC0gNzY6IElpaTFJMSArIGlpMUkgLiBpaWkxSTFJICogSTExaTExSWkgKiBvTwpkZWYgSUkxaUkxSTExSSAoIGlkZ2VuICkgOgogb08wT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogb09Pb28wT28gPSBvTzBPbyAuIGN1cnNvciAoICkKIG9PT29vME9vIC4gZXhlY3V0ZSAoICdDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAicmVjbyIgKGBpZGAgSU5URUdFUiBOT1QgTlVMTCwgYGlkcGVsYCBJTlRFR0VSIE5PVCBOVUxMLCBQUklNQVJZIEtFWShgaWRgKSk7JyApCiBvTzBPbyAuIGNvbW1pdCAoICkKIG9PT29vME9vIC4gZXhlY3V0ZSAoICdzZWxlY3QgaWRwZWwgZnJvbSByZWNvIG9yZGVyIGJ5IGlkOycgKQogT09PTzBPT29PME8wID0gb09Pb28wT28gLiBmZXRjaGFsbCAoICkKIG9PME9vIC4gY2xvc2UgKCApCiBpZiBPT09PME9Pb08wTzAgOgogIG8wT08wID0gWyBdCiAgZm9yIGlpSUkxaTEgaW4gT09PTzBPT29PME8wIDoKICAgbzBPTzAgLiBhcHBlbmQgKCBzdHIgKCBpaUlJMWkxIFsgMCBdICkgKQogIG8wT08wID0gJ18lcycgJSAnLicgLiBqb2luICggbzBPTzAgKQogIGlmIDQ0IC0gNDQ6IElpaTFJMSAtIG9PIC0gSWlpMUkxICUgTzBPT28gLiBJSQogIG9PME9vID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBPbzBPICkKICBvT09vbzBPbyA9IG9PME9vIC4gY3Vyc29yICggKQogIG9PT29vME9vIC4gZXhlY3V0ZSAoICJTRUxFQ1QgKiBGUk9NIHBlbGlzIElOTkVSIEpPSU4gcmVjbyBPTiBwZWxpcy5JRCA9IHJlY28uaWRwZWwgT1JERVIgQlkgcmVjby5pZDsiICkKICBPT09PME9Pb08wTzAgPSBvT09vbzBPbyAuIGZldGNoYWxsICggKQogIG9PT29vME9vIC4gZXhlY3V0ZSAoICdkZWxldGUgZnJvbSByZWNvOycgKQogIG9PME9vIC4gY29tbWl0ICggKQogIG9PME9vIC4gY2xvc2UgKCApCiAgTzAwME9PT09PbyAoIE9PT08wT09vTzBPMCAsIEZhbHNlICwgbzBPTzAgKQogZWxzZSA6CiAgb09vT28wTzBPT09vTyAoIGlkZ2VuICkKICBpZiA3NCAtIDc0OiBpMTFpSWlpSWlpIC4gSTExaTExSWkKZGVmIGlpSSAoIHBhcmFtc3RyaW5nICkgOgogb09JSWlJaSA9IGRpY3QgKCBwYXJzZV9xc2wgKCBwYXJhbXN0cmluZyApICkKIGlmIG9PSUlpSWkgOgogIGlmIG9PSUlpSWkgWyAnYWN0aW9uJyBdID09ICdnZW5lcm8nIDoKICAgaTFpICggKQogIGlmIG9PSUlpSWkgWyAnYWN0aW9uJyBdID09ICdnZW5lcm8yJyA6CiAgIEkxMTFpSSAoIG9PSUlpSWkgWyAnaWRnZW4nIF0gKQogIGlmIG9PSUlpSWkgWyAnYWN0aW9uJyBdID09ICd0ZW1hJyA6CiAgIE8wb08gKCApCiAgaWYgb09JSWlJaSBbICdhY3Rpb24nIF0gPT0gJ3RlbWEyJyA6CiAgIE9PT09vMCAoIG9PSUlpSWkgWyAnaWR0ZW0nIF0gKQogIGVsaWYgb09JSWlJaSBbICdhY3Rpb24nIF0gPT0gJ2Fubm8nIDoKICAgTzBvT09vT29vb29PICggKQogIGVsaWYgb09JSWlJaSBbICdhY3Rpb24nIF0gPT0gJ2Fubm8yJyA6CiAgIE9PT29PbyAoIG9PSUlpSWkgWyAnYW5ubycgXSApCiAgZWxpZiBvT0lJaUlpIFsgJ2FjdGlvbicgXSA9PSAnZ3J1cG8nIDoKICAgb09vb29PT08gKCApCiAgZWxpZiBvT0lJaUlpIFsgJ2FjdGlvbicgXSA9PSAnZ3J1cG8yJyA6CiAgIE9PTyAoIG9PSUlpSWkgWyAnaWRncnUnIF0gKQogIGVsaWYgb09JSWlJaSBbICdhY3Rpb24nIF0gPT0gJ3BhaXMnIDoKICAgbzBPMG8wICggKQogIGVsaWYgb09JSWlJaSBbICdhY3Rpb24nIF0gPT0gJ3BhaXMyJyA6CiAgIG8wT28wb08wb09PMDAgKCBvT0lJaUlpIFsgJ3BhaXMnIF0gKQogIGVsaWYgb09JSWlJaSBbICdhY3Rpb24nIF0gPT0gJ2J1c3RpdCcgOgogICBvMDAwMG9PICggKQogIGVsaWYgb09JSWlJaSBbICdhY3Rpb24nIF0gPT0gJ2J1c2RpcicgOgogICBpMUkxaTExMUlpICggKQogIGVsaWYgb09JSWlJaSBbICdhY3Rpb24nIF0gPT0gJ2J1c2RpcjInIDoKICAgaTFpMWlJMWlpaUkgKCBvT0lJaUlpIFsgJ2RpcmVjdG9yJyBdICkKICBlbGlmIG9PSUlpSWkgWyAnYWN0aW9uJyBdID09ICdidXNhY3QnIDoKICAgSUlJaWkxMSAoICkKICBlbGlmIG9PSUlpSWkgWyAnYWN0aW9uJyBdID09ICdidXNhY3QyJyA6CiAgIG9vTzAwME9PME8wME8gKCBvT0lJaUlpIFsgJ2lkYWN0JyBdICkKICBlbGlmIG9PSUlpSWkgWyAnYWN0aW9uJyBdID09ICdidXNncnUnIDoKICAgaWkxaWlpMWkgKCApCiAgZWxpZiBvT0lJaUlpIFsgJ2FjdGlvbicgXSA9PSAndWx0aW0nIDoKICAgaWkgKCApCiAgZWxpZiBvT0lJaUlpIFsgJ2FjdGlvbicgXSA9PSAndWx0aW0yJyA6CiAgIEkxMWlpaWkgKCApCiAgZWxpZiBvT0lJaUlpIFsgJ2FjdGlvbicgXSA9PSAndWx0aGQnIDoKICAgaTExMWlJaUkxSTFpMSAoICkKICBlbGlmIG9PSUlpSWkgWyAnYWN0aW9uJyBdID09ICdtdnRhcycgOgogICBPTzBvbyAoICkKICBlbGlmIG9PSUlpSWkgWyAnYWN0aW9uJyBdID09ICdwZWxyZWMnIDoKICAgaUkxaTExSUkxaSAoICkKICBlbGlmIG9PSUlpSWkgWyAnYWN0aW9uJyBdID09ICdwZWxyZWMyJyA6CiAgIElJMWlJMUkxMUkgKCBvT0lJaUlpIFsgJ2lkZ2VuJyBdICkKICBlbGlmIG9PSUlpSWkgWyAnYWN0aW9uJyBdID09ICdwbGF5JyA6CiAgIG8wMDBPMG8gKCBvT0lJaUlpIFsgJ3NlcnZlcicgXSAsIG9PSUlpSWkgWyAndXNlcicgXSAsIG9PSUlpSWkgWyAnY29sZScgXSAsIG9PSUlpSWkgWyAncGVsaScgXSAsIG9PSUlpSWkgWyAnaWQnIF0gLCBvT0lJaUlpIFsgJ3RpdCcgXSApCiBlbHNlIDoKICBpSTExSWkgKCApCiAgaWYgOTEgLSA5MTogSTFpMWlJMWkgKiBpaWkxSTFJIC8gSTExaTExSWkgLiBJaWkxSTEgKyBPMDBvT29Pb08wbzBPICsgTzBvbzBPTzAKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJyA6CiBpaUkgKCBzeXMgLiBhcmd2IFsgMiBdIFsgMSA6IF0gKQogaWYgOCAtIDg6IElJIC8gSTFpMWlJMWkKIGlmIDIwIC0gMjA6IEkxMWkxMUlpCiBpZiA5NSAtIDk1OiBJaWlJSWlpSTExIC0gSTExaTExSWkKIGlmIDM0IC0gMzQ6IGkxaUlJaTEgKiBJMTFpMTFJaSAuIGlpMUkgKiBpMWlJSWkxIC8gaTFpSUlpMQojIGRkNjc4ZmFhZTlhYzE2N2JjODNhYmY3OGU1Y2IyZjNmMDY4OGQzYTMK')